{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNil } from 'lodash';\nimport { AuthToken } from '.';\nimport AuthEngine from './controllers/engine';\nimport { IAuthClient } from './types';\nimport EventEmitter from 'events';\nexport class AuthClient extends IAuthClient {\n  static async init(opts) {\n    const client = new AuthClient(opts);\n    await client.initialize();\n    return client;\n  }\n  constructor(opts) {\n    super(opts);\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"autoStart\", false);\n    _defineProperty(this, \"engine\", void 0);\n    _defineProperty(this, \"events\", new EventEmitter());\n    // ---------- Events ----------------------------------------------- //\n    _defineProperty(this, \"emit\", (name, listener) => {\n      return this.events.emit(name, listener);\n    });\n    _defineProperty(this, \"on\", (name, listener) => {\n      return this.events.on(name, listener);\n    });\n    _defineProperty(this, \"once\", void 0);\n    _defineProperty(this, \"off\", void 0);\n    _defineProperty(this, \"removeListener\", void 0);\n    _defineProperty(this, \"setAuthorizationListener\", callback => {\n      this.on('auth_response', async _ref => {\n        let {\n          params\n        } = _ref;\n        const {\n          code,\n          state\n        } = params;\n        console.log('Listener received params', code, state);\n        if (code && state) {\n          typeof callback === 'function' && (await callback({\n            code,\n            state\n          }, ''));\n        }\n      });\n      console.log(\"Initialized Listener\");\n    });\n    // ---------- Engine ----------------------------------------------- //\n    // request authentication\n    _defineProperty(this, \"request\", async params => {\n      try {\n        await this.engine.request(params);\n      } catch (error) {\n        throw error;\n      }\n    });\n    _defineProperty(this, \"start\", async () => {\n      console.info('Starting subcribe authorization response ...');\n      await this.setAuthorizationListener(this.authorizationCallbackFunc);\n      await this.engine.registerOnAuthResponse();\n      console.info('Started subcribe authorization response !!!');\n    });\n    this.name = opts === null || opts === void 0 ? void 0 : opts.name;\n    this.clientId = opts.clientId;\n    this.mode = opts.mode;\n    this.autoStart = opts.autoStart;\n    this.authorizationCallbackFunc = opts.authorizationCallbackFunc;\n    this.engine = new AuthEngine(this);\n  }\n  async checkAuthExistRequirements() {\n    const token = await AuthToken.get();\n    if (isNil(token)) {\n      return false;\n    }\n    return true;\n  }\n  // ---------- Private ----------------------------------------------- //\n  async initialize() {\n    console.log(\"Initialized\");\n    try {\n      await AuthToken.initInstanceStorage();\n      await this.engine.init();\n      console.info(\"AuthClient Initialization Success\");\n      console.info({\n        authClient: this\n      });\n      if (this.autoStart) {\n        await this.start();\n      }\n    } catch (error) {\n      console.info(\"AuthClient Initialization Failure\");\n      console.error(error.message);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["isNil","AuthToken","AuthEngine","IAuthClient","EventEmitter","AuthClient","init","opts","client","initialize","constructor","_defineProperty","name","listener","events","emit","on","callback","_ref","params","code","state","console","log","engine","request","error","info","setAuthorizationListener","authorizationCallbackFunc","registerOnAuthResponse","clientId","mode","autoStart","checkAuthExistRequirements","token","get","initInstanceStorage","authClient","start","message"],"sources":["/Users/phuocnd/phuocnd/works/mirai/miraiidjs/src/auth-client/client.ts"],"sourcesContent":["import { isNil } from 'lodash';\nimport { AuthToken } from '.';\nimport AuthEngine from './controllers/engine';\nimport { AuthClientTypes, AuthEngineTypes, IAuthClient } from './types';\nimport EventEmitter from 'events';\n\nexport class AuthClient extends IAuthClient {\n\tpublic name: string;\n\tpublic autoStart: boolean = false;\n\n\tpublic engine: IAuthClient['engine'];\n\tpublic events: IAuthClient['events'] = new EventEmitter();\n\n\t// ---------- Events ----------------------------------------------- //\n\n\tpublic emit: IAuthClient['emit'] = (name, listener) => {\n\t\treturn this.events.emit(name, listener);\n\t};\n\n\tpublic on: IAuthClient['on'] = (name, listener) => {\n\t\treturn this.events.on(name, listener);\n\t};\n\n\tpublic once: <E extends AuthClientTypes.Event>(\n\t\tevent: E,\n\t\tlistener: (args: AuthClientTypes.EventArguments[E]) => void,\n\t) => EventEmitter;\n\tpublic off: <E extends AuthClientTypes.Event>(\n\t\tevent: E,\n\t\tlistener: (args: AuthClientTypes.EventArguments[E]) => void,\n\t) => EventEmitter;\n\tpublic removeListener: <E extends AuthClientTypes.Event>(\n\t\tevent: E,\n\t\tlistener: (args: AuthClientTypes.EventArguments[E]) => void,\n\t) => EventEmitter;\n\n\tstatic async init(opts: AuthClientTypes.Options) {\n\t\tconst client = new AuthClient(opts);\n\t\tawait client.initialize();\n\n\t\treturn client;\n\t}\n\n\tconstructor(opts: AuthClientTypes.Options) {\n\t\tsuper(opts);\n\n\t\tthis.name = opts?.name;\n\t\tthis.clientId = opts.clientId;\n\t\tthis.mode = opts.mode;\n\t\tthis.autoStart = opts.autoStart;\n\t\tthis.authorizationCallbackFunc = opts.authorizationCallbackFunc;\n\t\tthis.engine = new AuthEngine(this);\n\t}\n\n\tprivate setAuthorizationListener = (\n\t\tcallback: ({ code, state }: { code: string; state: string }, error: any) => Promise<void>,\n\t) => {\n\t\tthis.on('auth_response', async ({ params }) => {\n\t\t\tconst { code, state } = params;\n\t\t\tconsole.log('Listener received params', code, state);\n\t\t\tif (code && state) {\n\t\t\t\ttypeof callback === 'function' && (await callback({ code, state }, ''));\n\t\t\t}\n\t\t});\n\n\t\tconsole.log(`Initialized Listener`);\n\t};\n\n\tasync checkAuthExistRequirements(): Promise<boolean> {\n\t\tconst token = await AuthToken.get();\n\n\t\tif (isNil(token)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t// ---------- Engine ----------------------------------------------- //\n\t// request authentication\n\tpublic request: IAuthClient['request'] = async (params: AuthEngineTypes.RequestParams) => {\n\t\ttry {\n\t\t\tawait this.engine.request(params);\n\t\t} catch (error: any) {\n\t\t\tthrow error;\n\t\t}\n\t};\n\n\tpublic start = async () => {\n\t\tconsole.info('Starting subcribe authorization response ...');\n\t\tawait this.setAuthorizationListener(this.authorizationCallbackFunc);\n\n\t\tawait this.engine.registerOnAuthResponse();\n\n\t\tconsole.info('Started subcribe authorization response !!!');\n\t};\n\n\t// ---------- Private ----------------------------------------------- //\n\tprivate async initialize() {\n\t\tconsole.log(`Initialized`);\n\t\ttry {\n\t\t\tawait AuthToken.initInstanceStorage();\n\t\t\tawait this.engine.init();\n\n\t\t\tconsole.info(`AuthClient Initialization Success`);\n\t\t\tconsole.info({ authClient: this });\n\n\t\t\tif (this.autoStart) {\n\t\t\t\tawait this.start();\n\t\t\t}\n\t\t} catch (error: any) {\n\t\t\tconsole.info(`AuthClient Initialization Failure`);\n\t\t\tconsole.error(error.message);\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}