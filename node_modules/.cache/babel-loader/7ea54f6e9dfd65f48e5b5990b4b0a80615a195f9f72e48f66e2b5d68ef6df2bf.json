{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { EventEmitter } from 'events';\nimport { miraiTestnet } from '../../constants/chains';\nexport function getEthereumChainId(chains) {\n  return Number(chains[0].split(':')[1]);\n}\nexport function toHexChainId(chainId) {\n  return \"0x\".concat(chainId.toString(16));\n}\n\n// helper type to force setting at least one value in an array\n\nexport class MiraiProvider {\n  constructor() {\n    _defineProperty(this, \"emitter\", new EventEmitter());\n    _defineProperty(this, \"accounts\", []);\n    _defineProperty(this, \"connection\", void 0);\n    _defineProperty(this, \"chainId\", miraiTestnet.id);\n    _defineProperty(this, \"on\", (event, listener) => {\n      this.emitter.on(event, listener);\n      return this;\n    });\n    _defineProperty(this, \"once\", (event, listener) => {\n      this.emitter.once(event, listener);\n      return this;\n    });\n    _defineProperty(this, \"removeListener\", (event, listener) => {\n      this.emitter.removeListener(event, listener);\n      return this;\n    });\n    _defineProperty(this, \"off\", (event, listener) => {\n      this.emitter.off(event, listener);\n      return this;\n    });\n    _defineProperty(this, \"parseAccount\", payload => {\n      console.log('payload', payload);\n      return this.parseAccountId(payload).address;\n    });\n  } // assigned during initialize\n  // this._signer = new SignerWebSocketService();\n\n  static async init(opts) {\n    const provider = new MiraiProvider();\n    await provider.initialize(opts);\n    return provider;\n  }\n  async request(args) {\n    return new Promise(async (resolve, reject) => {\n      const socket = await this.connection.ws.establish(true);\n      socket.internal().once(args.method, message => {\n        console.log(':message', message);\n      });\n      socket.on('exception', args => {\n        socket.disconnect();\n        reject(new Error(JSON.stringify(args)));\n      });\n      socket.on('connect', () => {\n        console.log('emitted', args);\n        socket.getSocket().emit(args.method, args.params, data => {\n          console.log('data receive method', data);\n          if (data.code) {\n            reject(new Error(data.message));\n          }\n          resolve(data);\n        });\n      });\n      socket.on('connect_error', () => {\n        reject(new Error('Connection error'));\n      });\n      socket.connect();\n    });\n  }\n  async enable() {\n    const accounts = await this.request({\n      method: 'eth_requestAccounts'\n    });\n    return accounts;\n  }\n  async getChainId() {\n    const chain = await this.request({\n      method: 'eth_chainId'\n    });\n    console.log('chain', chain);\n    return chain;\n  }\n  async connect(opts) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const socket = await this.connection.ws.establish(true);\n        socket.on('exception', args => {\n          socket.disconnect();\n          console.log('disconnect');\n          reject(new Error(JSON.stringify(args)));\n        });\n        socket.on('connect', e => {\n          console.log('connected');\n        });\n        socket.on('connect_error', () => {\n          reject(new Error('Connection error'));\n        });\n        socket.on('session', resp => {\n          try {\n            if (resp.code === 0) {\n              throw new Error(JSON.stringify(resp.data));\n            }\n            const {\n              namespaces\n            } = resp.data;\n            this.setAccounts(namespaces['eip155']['accounts']);\n            resolve(resp.data);\n          } catch (e) {\n            reject(e);\n          }\n        });\n        socket.on('chainChanged', resp => {\n          console.log('chains', resp);\n          if (resp.code === 0) {\n            throw new Error(JSON.stringify(resp.data));\n          }\n          const chainId = resp.data;\n          this.setChainId(chainId);\n        });\n        socket.on('accountsChanged', resp => {\n          if (resp.code === 0) {\n            throw new Error(JSON.stringify(resp.data));\n          }\n          const accounts = resp.data;\n          this.setAccounts(this.parseAccounts(accounts));\n        });\n        socket.connect();\n        this.emitter.emit('connect', {\n          chainId: toHexChainId(this.chainId)\n        });\n      } catch (error) {\n        console.error(error);\n        throw error;\n      } finally {}\n    });\n  }\n  async disconnect() {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const socket = await this.connection.ws.establish(true);\n        socket.on('exception', args => {\n          socket.disconnect();\n          console.log('disconnect');\n          reject(new Error(JSON.stringify(args)));\n        });\n        console.time('WS get-pail');\n        socket.on('connect', () => {\n          console.log('connected');\n        });\n        socket.on('connect_error', () => {\n          reject(new Error('Connection error'));\n        });\n        socket.disconnect();\n        this.emitter.emit('disconnect', {});\n      } catch (error) {\n        console.error(error);\n        throw error;\n      } finally {\n        this.reset();\n      }\n    });\n  }\n  get isWalletConnect() {\n    return true;\n  }\n  switchEthereumChain(chainId) {\n    this.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{\n        chainId: chainId.toString(16)\n      }]\n    });\n  }\n  parseChainId(chainId) {\n    return Number(chainId.split(':')[1]);\n  }\n  setChainIds(chains) {\n    this.emitter.emit('chainChanged', toHexChainId(this.chainId));\n    this.persist();\n  }\n  setChainId(chain) {\n    this.switchEthereumChain(chain);\n  }\n  parseAccountId(account) {\n    const [namespace, reference, address] = account.split(':');\n    const chainId = \"\".concat(namespace, \":\").concat(reference);\n    return {\n      chainId,\n      address\n    };\n  }\n  setAccounts(accounts) {\n    this.accounts = accounts.map(x => this.parseAccountId(x).address);\n    this.emitter.emit('accountsChanged', this.accounts);\n  }\n  async initialize(opts) {\n    this.connection = opts.connection;\n  }\n  reset() {\n    this.chainId = 1;\n    this.accounts = [];\n  }\n  persist() {}\n  parseAccounts(payload) {\n    if (typeof payload === 'string' || payload instanceof String) {\n      return [this.parseAccount(payload)];\n    }\n    return payload.map(account => this.parseAccount(account));\n  }\n}","map":{"version":3,"names":["EventEmitter","miraiTestnet","getEthereumChainId","chains","Number","split","toHexChainId","chainId","concat","toString","MiraiProvider","constructor","_defineProperty","id","event","listener","emitter","on","once","removeListener","off","payload","console","log","parseAccountId","address","init","opts","provider","initialize","request","args","Promise","resolve","reject","socket","connection","ws","establish","internal","method","message","disconnect","Error","JSON","stringify","getSocket","emit","params","data","code","connect","enable","accounts","getChainId","chain","e","resp","namespaces","setAccounts","setChainId","parseAccounts","error","time","reset","isWalletConnect","switchEthereumChain","parseChainId","setChainIds","persist","account","namespace","reference","map","x","String","parseAccount"],"sources":["/Users/phuocnd/phuocnd/works/mirai/miraiidjs/src/sign-provider/providers/mirai-provider.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport {\n\tIEthereumProvider as IProvider,\n\tIEthereumProviderEvents,\n\tProviderAccounts,\n\tRequestArguments,\n\tProviderChainId,\n} from './types';\nimport { Connection } from '../connection/connection';\nimport { miraiTestnet } from '../../constants/chains';\n\nexport type RpcMethod =\n\t| 'personal_sign'\n\t| 'eth_sendTransaction'\n\t| 'eth_accounts'\n\t| 'eth_requestAccounts'\n\t| 'eth_call'\n\t| 'eth_getBalance'\n\t| 'eth_sendRawTransaction'\n\t| 'eth_sign'\n\t| 'eth_signTransaction'\n\t| 'eth_signTypedData'\n\t| 'eth_signTypedData_v3'\n\t| 'eth_signTypedData_v4'\n\t| 'wallet_switchEthereumChain'\n\t| 'wallet_addEthereumChain'\n\t| 'wallet_getPermissions'\n\t| 'wallet_requestPermissions'\n\t| 'wallet_registerOnboarding';\n\nexport type RpcEvent = 'accountsChanged' | 'chainChanged' | 'message' | 'disconnect' | 'connect';\n\nexport interface EthereumRpcMap {\n\t[chainId: string]: string;\n}\n\nexport interface SessionEvent {\n\tevent: { name: string; data: any };\n\tchainId: string;\n}\n\nexport interface ConnectOps {\n\tchains?: number[];\n\toptionalChains?: number[];\n\trpcMap?: EthereumRpcMap;\n\tpairingTopic?: string;\n\tchainId: number;\n}\n\nexport interface IEthereumProvider extends IProvider {\n\tconnect(opts?: ConnectOps | undefined): Promise<WalletConnectSession>;\n}\n\nexport function getEthereumChainId(chains: string[]): number {\n\treturn Number(chains[0].split(':')[1]);\n}\n\nexport function toHexChainId(chainId: number): string {\n\treturn `0x${chainId.toString(16)}`;\n}\n\n// helper type to force setting at least one value in an array\ntype ArrayOneOrMore<T> = {\n\t0: T;\n} & Array<T>;\n\nexport type EthereumProviderOptions = {\n\tconnection?: Connection;\n};\n\nexport type WalletConnectSession = {\n\ttopic: string;\n\texpiry: number;\n\tacknowledged: boolean;\n\tpairingTopic: string;\n\tcontroller: string;\n\tpeer: {\n\t\tpublicKey: string;\n\t\tmetadata: {\n\t\t\tname: string;\n\t\t\tdescription: string;\n\t\t\turl: string;\n\t\t\ticons: [];\n\t\t};\n\t};\n\tnamespaces?: {\n\t\t'eip155': {\n\t\t\taccounts: string[];\n\t\t\tevents: string[];\n\t\t};\n\t};\n};\n\nexport class MiraiProvider implements IEthereumProvider {\n\tpublic emitter = new EventEmitter();\n\tpublic accounts: string[] = [];\n\tprivate connection: Connection;\n\tpublic chainId = miraiTestnet.id;\n\n\tconstructor() {\n\t\t// assigned during initialize\n\t\t// this._signer = new SignerWebSocketService();\n\t}\n\n\tstatic async init(opts: EthereumProviderOptions): Promise<MiraiProvider> {\n\t\tconst provider = new MiraiProvider();\n\t\tawait provider.initialize(opts);\n\n\t\treturn provider;\n\t}\n\n\tpublic async request<T = unknown>(args: RequestArguments): Promise<T> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst socket = await this.connection.ws.establish(true);\n\n\t\t\tsocket.internal().once(args.method, (message: string) => {\n\t\t\t\tconsole.log(':message', message);\n\t\t\t});\n\n\t\t\tsocket.on('exception', (args: any) => {\n\t\t\t\tsocket.disconnect();\n\t\t\t\treject(new Error(JSON.stringify(args)));\n\t\t\t});\n\n\t\t\tsocket.on('connect', () => {\n\t\t\t\tconsole.log('emitted', args);\n\t\t\t\tsocket.getSocket().emit(args.method, args.params, (data: T & { code: number; message: string }) => {\n\t\t\t\t\tconsole.log('data receive method', data);\n\n\t\t\t\t\tif (data.code) {\n\t\t\t\t\t\treject(new Error(data.message));\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve(data);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tsocket.on('connect_error', () => {\n\t\t\t\treject(new Error('Connection error'));\n\t\t\t});\n\n\t\t\tsocket.connect();\n\t\t});\n\t}\n\n\tpublic async enable(): Promise<ProviderAccounts> {\n\t\tconst accounts = await this.request({ method: 'eth_requestAccounts' });\n\t\treturn accounts as ProviderAccounts;\n\t}\n\n\tpublic async getChainId(): Promise<ProviderChainId> {\n\t\tconst chain = await this.request({ method: 'eth_chainId' });\n\n\t\tconsole.log('chain', chain);\n\t\treturn chain as ProviderChainId;\n\t}\n\n\tpublic async connect(opts?: ConnectOps): Promise<WalletConnectSession> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst socket = await this.connection.ws.establish(true);\n\n\t\t\t\tsocket.on('exception', (args: any) => {\n\t\t\t\t\tsocket.disconnect();\n\t\t\t\t\tconsole.log('disconnect');\n\n\t\t\t\t\treject(new Error(JSON.stringify(args)));\n\t\t\t\t});\n\n\t\t\t\tsocket.on('connect', (e: any) => {\n\t\t\t\t\tconsole.log('connected');\n\t\t\t\t});\n\n\t\t\t\tsocket.on('connect_error', () => {\n\t\t\t\t\treject(new Error('Connection error'));\n\t\t\t\t});\n\n\t\t\t\tsocket.on('session', (resp: any) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (resp.code === 0) {\n\t\t\t\t\t\t\tthrow new Error(JSON.stringify(resp.data));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst { namespaces } = resp.data as WalletConnectSession;\n\n\t\t\t\t\t\tthis.setAccounts(namespaces['eip155']['accounts']);\n\t\t\t\t\t\tresolve(resp.data);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treject(e);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tsocket.on('chainChanged', (resp: any) => {\n\t\t\t\t\tconsole.log('chains', resp);\n\t\t\t\t\tif (resp.code === 0) {\n\t\t\t\t\t\tthrow new Error(JSON.stringify(resp.data));\n\t\t\t\t\t}\n\n\t\t\t\t\tconst chainId = resp.data as number;\n\n\t\t\t\t\tthis.setChainId(chainId);\n\t\t\t\t});\n\n\t\t\t\tsocket.on('accountsChanged', (resp: any) => {\n\t\t\t\t\tif (resp.code === 0) {\n\t\t\t\t\t\tthrow new Error(JSON.stringify(resp.data));\n\t\t\t\t\t}\n\n\t\t\t\t\tconst accounts = resp.data as string[];\n\n\t\t\t\t\tthis.setAccounts(this.parseAccounts(accounts));\n\t\t\t\t});\n\n\t\t\t\tsocket.connect();\n\t\t\t\tthis.emitter.emit('connect', { chainId: toHexChainId(this.chainId) });\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tthrow error;\n\t\t\t} finally {\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async disconnect(): Promise<void> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst socket = await this.connection.ws.establish(true);\n\n\t\t\t\tsocket.on('exception', (args: any) => {\n\t\t\t\t\tsocket.disconnect();\n\t\t\t\t\tconsole.log('disconnect');\n\n\t\t\t\t\treject(new Error(JSON.stringify(args)));\n\t\t\t\t});\n\n\t\t\t\tconsole.time('WS get-pail');\n\t\t\t\tsocket.on('connect', () => {\n\t\t\t\t\tconsole.log('connected');\n\t\t\t\t});\n\n\t\t\t\tsocket.on('connect_error', () => {\n\t\t\t\t\treject(new Error('Connection error'));\n\t\t\t\t});\n\n\t\t\t\tsocket.disconnect();\n\t\t\t\tthis.emitter.emit('disconnect', {});\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tthrow error;\n\t\t\t} finally {\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic on: IEthereumProviderEvents['on'] = (event, listener) => {\n\t\tthis.emitter.on(event, listener);\n\t\treturn this;\n\t};\n\n\tpublic once: IEthereumProviderEvents['once'] = (event, listener) => {\n\t\tthis.emitter.once(event, listener);\n\t\treturn this;\n\t};\n\n\tpublic removeListener: IEthereumProviderEvents['removeListener'] = (event, listener) => {\n\t\tthis.emitter.removeListener(event, listener);\n\t\treturn this;\n\t};\n\n\tpublic off: IEthereumProviderEvents['off'] = (event, listener) => {\n\t\tthis.emitter.off(event, listener);\n\t\treturn this;\n\t};\n\n\tget isWalletConnect() {\n\t\treturn true;\n\t}\n\n\tprotected switchEthereumChain(chainId: number): void {\n\t\tthis.request({\n\t\t\tmethod: 'wallet_switchEthereumChain',\n\t\t\tparams: [{ chainId: chainId.toString(16) }],\n\t\t});\n\t}\n\n\tprotected parseChainId(chainId: string): number {\n\t\treturn Number(chainId.split(':')[1]);\n\t}\n\n\tprotected setChainIds(chains: string[]) {\n\t\tthis.emitter.emit('chainChanged', toHexChainId(this.chainId));\n\t\tthis.persist();\n\t}\n\n\tprotected setChainId(chain: number) {\n\t\tthis.switchEthereumChain(chain);\n\t}\n\n\tprotected parseAccountId(account: string): { chainId: string; address: string } {\n\t\tconst [namespace, reference, address] = account.split(':');\n\t\tconst chainId = `${namespace}:${reference}`;\n\t\treturn { chainId, address };\n\t}\n\n\tprotected setAccounts(accounts: string[]) {\n\t\tthis.accounts = accounts.map((x) => this.parseAccountId(x).address);\n\t\tthis.emitter.emit('accountsChanged', this.accounts);\n\t}\n\n\tprotected async initialize(opts: EthereumProviderOptions) {\n\t\tthis.connection = opts.connection;\n\t}\n\n\tprotected reset() {\n\t\tthis.chainId = 1;\n\t\tthis.accounts = [];\n\t}\n\n\tprotected persist() {}\n\n\tprotected parseAccounts(payload: string | string[]): string[] {\n\t\tif (typeof payload === 'string' || payload instanceof String) {\n\t\t\treturn [this.parseAccount(payload)];\n\t\t}\n\t\treturn payload.map((account: string) => this.parseAccount(account));\n\t}\n\n\tprotected parseAccount = (payload: any): string => {\n\t\tconsole.log('payload', payload);\n\t\treturn this.parseAccountId(payload).address;\n\t};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}