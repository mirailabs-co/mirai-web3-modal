{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nexport class IAuthClient {\n  constructor(opts) {\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"mode\", void 0);\n    _defineProperty(this, \"clientId\", void 0);\n    _defineProperty(this, \"authorizationCallbackFunc\", void 0);\n    _defineProperty(this, \"engine\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    // ---------- Public Methods ----------------------------------------------- //\n    _defineProperty(this, \"request\", void 0);\n    // ---------- Event Handlers ----------------------------------------------- //\n    _defineProperty(this, \"emit\", void 0);\n    _defineProperty(this, \"on\", void 0);\n    _defineProperty(this, \"once\", void 0);\n    _defineProperty(this, \"off\", void 0);\n    _defineProperty(this, \"removeListener\", void 0);\n  }\n}","map":{"version":3,"names":["IAuthClient","constructor","opts","_defineProperty"],"sources":["/Users/phuocnd/phuocnd/works/mirai/miraiidjs/src/auth-client/types/client.ts"],"sourcesContent":["import { Mode } from '../constants';\nimport EventEmitter from 'events';\nimport { IAuthEngine } from './engine';\n\nexport declare namespace AuthClientTypes {\n\ttype Event = 'auth_request' | 'auth_response';\n\n\tinterface AuthRequestEventArgs {\n\t\trequester: string;\n\t}\n\n\ttype AuthResponseEventArgs = { code: string; state: string };\n\n\tinterface BaseEventArgs<T = unknown> {\n\t\tparams: T;\n\t}\n\n\tinterface EventArguments {\n\t\tauth_request: BaseEventArgs<AuthRequestEventArgs>;\n\t\tauth_response: BaseEventArgs<AuthResponseEventArgs>;\n\t}\n\n\tinterface Options {\n\t\tmode: Mode;\n\t\tclientId: string;\n\t\tname: string;\n\t\tauthorizationCallbackFunc: ({ code, state }: { code: string; state: string }, error: any) => Promise<void>;\n\t\tautoStart?: boolean;\n\t}\n}\n\nexport abstract class IAuthClient {\n\tpublic abstract readonly name: string;\n\tpublic mode: Mode;\n\tpublic clientId: string;\n\tpublic authorizationCallbackFunc: ({ code, state }: { code: string; state: string }, error: any) => Promise<void>;\n\n\tpublic abstract engine: IAuthEngine;\n\tpublic abstract events: EventEmitter;\n\n\tconstructor(opts: AuthClientTypes.Options) {}\n\n\t// ---------- Public Methods ----------------------------------------------- //\n\tpublic abstract request: IAuthEngine['request'];\n\n\t// ---------- Event Handlers ----------------------------------------------- //\n\tpublic abstract emit: <E extends AuthClientTypes.Event>(\n\t\tevent: E,\n\t\targs: AuthClientTypes.EventArguments[E],\n\t) => boolean;\n\n\tpublic abstract on: <E extends AuthClientTypes.Event>(\n\t\tevent: E,\n\t\tlistener: (args: AuthClientTypes.EventArguments[E]) => void,\n\t) => EventEmitter;\n\n\tpublic abstract once: <E extends AuthClientTypes.Event>(\n\t\tevent: E,\n\t\tlistener: (args: AuthClientTypes.EventArguments[E]) => void,\n\t) => EventEmitter;\n\n\tpublic abstract off: <E extends AuthClientTypes.Event>(\n\t\tevent: E,\n\t\tlistener: (args: AuthClientTypes.EventArguments[E]) => void,\n\t) => EventEmitter;\n\n\tpublic abstract removeListener: <E extends AuthClientTypes.Event>(\n\t\tevent: E,\n\t\tlistener: (args: AuthClientTypes.EventArguments[E]) => void,\n\t) => EventEmitter;\n}\n"],"mappings":";AA+BA,OAAO,MAAeA,WAAW,CAAC;EASjCC,WAAWA,CAACC,IAA6B,EAAE;IAAAC,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAE3C;IAAAA,eAAA;IAGA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;EAL4C;AA8B7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}