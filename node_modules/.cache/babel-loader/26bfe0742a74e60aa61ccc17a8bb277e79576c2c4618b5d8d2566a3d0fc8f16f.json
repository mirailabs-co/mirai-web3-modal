{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport EventEmitter from 'eventemitter3';\nimport { SignerWebSocketService } from '../transports/websocket/ws-signer';\nimport { Connection } from './connection';\nexport const CONNECTION_EVENTS = {\n  init: 'ws_init',\n  connected: 'ws_connected',\n  open: 'ws_open',\n  open_error: 'ws_open_error',\n  register_error: 'ws_register_error',\n  disconnected: 'ws_disconnected',\n  error: 'ws_error'\n};\nexport const MiraiRelayerUrl = 'ws://localhost:3000';\nexport class MiraiConnection extends Connection {\n  constructor() {\n    super();\n    _defineProperty(this, \"events\", new EventEmitter());\n    _defineProperty(this, \"pending\", false);\n    _defineProperty(this, \"initializing\", false);\n    _defineProperty(this, \"initialized\", false);\n    _defineProperty(this, \"ws\", void 0);\n  }\n  static async init() {\n    const connection = new MiraiConnection();\n    await connection.initialize();\n    return connection;\n  }\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n  isConnected() {\n    return this.initialized;\n  }\n\n  // PRIVATE\n  async initialize() {\n    if (this.pending) {\n      return new Promise((resolve, reject) => {\n        this.events.once(CONNECTION_EVENTS.open, () => {\n          this.events.once(CONNECTION_EVENTS.open_error, error => {\n            reject(error);\n          });\n          if (typeof this.ws === 'undefined') {\n            return reject(new Error('WS not initialized'));\n          }\n          resolve();\n        });\n      });\n    }\n    try {\n      this.pending = true;\n      await this.register();\n      const connected = await this.connect();\n      this.events.emit(CONNECTION_EVENTS.open);\n      if (connected) {\n        this.initialized = true;\n      }\n    } catch (e) {\n      this.events.emit(CONNECTION_EVENTS.open_error, e);\n      throw e;\n    }\n  }\n  async register() {\n    if (typeof this.ws !== 'undefined') {\n      return this.ws;\n    }\n    if (this.initializing) {\n      return new Promise((resolve, reject) => {\n        this.events.once(CONNECTION_EVENTS.register_error, error => {\n          reject(error);\n        });\n        this.events.once(CONNECTION_EVENTS.init, () => {\n          if (typeof this.ws === 'undefined') {\n            return reject(new Error('WS not initialized'));\n          }\n          resolve(this.ws);\n        });\n      });\n    }\n    try {\n      this.initializing = true;\n      this.ws = new SignerWebSocketService({\n        url: MiraiRelayerUrl\n      });\n      this.initializing = false;\n      this.events.emit(CONNECTION_EVENTS.init);\n      return this.ws;\n    } catch (e) {\n      this.events.emit(CONNECTION_EVENTS.register_error, e);\n      throw e;\n    }\n  }\n  async connect() {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const socket = await this.ws.establish(true);\n        socket.on('exception', args => {\n          socket.disconnect();\n          this.events.emit(CONNECTION_EVENTS.error, new Error(JSON.stringify(args)));\n          reject(false);\n        });\n        socket.on('connect', e => {\n          this.events.emit(CONNECTION_EVENTS.connected);\n          resolve(true);\n        });\n        socket.on('connect_error', () => {\n          this.events.emit(CONNECTION_EVENTS.error, new Error(JSON.stringify('Connection error')));\n          reject(false);\n        });\n        socket.connect();\n      } catch (error) {\n        console.error(error);\n        throw error;\n      } finally {}\n    });\n  }\n  async disconnect() {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const socket = await this.ws.establish(true);\n        socket.on('exception', args => {\n          socket.disconnect();\n          this.events.emit(CONNECTION_EVENTS.open_error, new Error(JSON.stringify(args)));\n          reject(new Error(JSON.stringify(args)));\n        });\n        console.time('WS get-pail');\n        socket.on('connect', () => {\n          console.log('connected');\n        });\n        socket.on('connect_error', () => {\n          reject(new Error('Connection error'));\n        });\n        socket.disconnect();\n      } catch (error) {\n        console.error(error);\n        throw error;\n      } finally {}\n    });\n  }\n}","map":{"version":3,"names":["EventEmitter","SignerWebSocketService","Connection","CONNECTION_EVENTS","init","connected","open","open_error","register_error","disconnected","error","MiraiRelayerUrl","MiraiConnection","constructor","_defineProperty","connection","initialize","on","event","listener","events","once","off","removeListener","isConnected","initialized","pending","Promise","resolve","reject","ws","Error","register","connect","emit","e","initializing","url","socket","establish","args","disconnect","JSON","stringify","console","time","log"],"sources":["/Users/phuocnd/phuocnd/works/mirai/miraiidjs/src/sign-provider/connection/mirai-connection.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { SignerWebSocketService } from '../transports/websocket/ws-signer';\nimport { Connection } from './connection';\n\nexport const CONNECTION_EVENTS = {\n\tinit: 'ws_init',\n\tconnected: 'ws_connected',\n\topen: 'ws_open',\n\topen_error: 'ws_open_error',\n\tregister_error: 'ws_register_error',\n\tdisconnected: 'ws_disconnected',\n\terror: 'ws_error',\n};\n\nexport const MiraiRelayerUrl: string = 'ws://localhost:3000';\n\nexport class MiraiConnection extends Connection {\n\tpublic events: any = new EventEmitter();\n\n\tprivate pending = false;\n\tprivate initializing = false;\n\tprivate initialized = false;\n\tpublic ws: InstanceType<typeof SignerWebSocketService>;\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tpublic static async init() {\n\t\tconst connection = new MiraiConnection();\n\n\t\tawait connection.initialize();\n\n\t\treturn connection;\n\t}\n\n\tpublic on(event: string, listener: any) {\n\t\tthis.events.on(event, listener);\n\t}\n\n\tpublic once(event: string, listener: any) {\n\t\tthis.events.once(event, listener);\n\t}\n\n\tpublic off(event: string, listener: any) {\n\t\tthis.events.off(event, listener);\n\t}\n\n\tpublic removeListener(event: string, listener: any) {\n\t\tthis.events.removeListener(event, listener);\n\t}\n\n\tpublic isConnected(): boolean {\n\t\treturn this.initialized;\n\t}\n\n\t// PRIVATE\n\tprivate async initialize(): Promise<void> {\n\t\tif (this.pending) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.events.once(CONNECTION_EVENTS.open, () => {\n\t\t\t\t\tthis.events.once(CONNECTION_EVENTS.open_error, (error: any) => {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t});\n\t\t\t\t\tif (typeof this.ws === 'undefined') {\n\t\t\t\t\t\treturn reject(new Error('WS not initialized'));\n\t\t\t\t\t}\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\ttry {\n\t\t\tthis.pending = true;\n\t\t\tawait this.register();\n\t\t\tconst connected = await this.connect();\n\n\t\t\tthis.events.emit(CONNECTION_EVENTS.open);\n\n\t\t\tif (connected) {\n\t\t\t\tthis.initialized = true;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.events.emit(CONNECTION_EVENTS.open_error, e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprivate async register(): Promise<SignerWebSocketService> {\n\t\tif (typeof this.ws !== 'undefined') {\n\t\t\treturn this.ws;\n\t\t}\n\n\t\tif (this.initializing) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.events.once(CONNECTION_EVENTS.register_error, (error: any) => {\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t\t\tthis.events.once(CONNECTION_EVENTS.init, () => {\n\t\t\t\t\tif (typeof this.ws === 'undefined') {\n\t\t\t\t\t\treturn reject(new Error('WS not initialized'));\n\t\t\t\t\t}\n\t\t\t\t\tresolve(this.ws);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\ttry {\n\t\t\tthis.initializing = true;\n\n\t\t\tthis.ws = new SignerWebSocketService({\n\t\t\t\turl: MiraiRelayerUrl,\n\t\t\t});\n\n\t\t\tthis.initializing = false;\n\t\t\tthis.events.emit(CONNECTION_EVENTS.init);\n\t\t\treturn this.ws;\n\t\t} catch (e) {\n\t\t\tthis.events.emit(CONNECTION_EVENTS.register_error, e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tpublic async connect(): Promise<boolean> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst socket = await this.ws.establish(true);\n\n\t\t\t\tsocket.on('exception', (args: any) => {\n\t\t\t\t\tsocket.disconnect();\n\t\t\t\t\tthis.events.emit(CONNECTION_EVENTS.error, new Error(JSON.stringify(args)));\n\n\t\t\t\t\treject(false);\n\t\t\t\t});\n\n\t\t\t\tsocket.on('connect', (e: any) => {\n\t\t\t\t\tthis.events.emit(CONNECTION_EVENTS.connected);\n\n\t\t\t\t\tresolve(true);\n\t\t\t\t});\n\n\t\t\t\tsocket.on('connect_error', () => {\n\t\t\t\t\tthis.events.emit(CONNECTION_EVENTS.error, new Error(JSON.stringify('Connection error')));\n\t\t\t\t\treject(false);\n\t\t\t\t});\n\n\t\t\t\tsocket.connect();\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tthrow error;\n\t\t\t} finally {\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async disconnect(): Promise<void> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst socket = await this.ws.establish(true);\n\n\t\t\t\tsocket.on('exception', (args: any) => {\n\t\t\t\t\tsocket.disconnect();\n\t\t\t\t\tthis.events.emit(CONNECTION_EVENTS.open_error, new Error(JSON.stringify(args)));\n\n\t\t\t\t\treject(new Error(JSON.stringify(args)));\n\t\t\t\t});\n\n\t\t\t\tconsole.time('WS get-pail');\n\t\t\t\tsocket.on('connect', () => {\n\t\t\t\t\tconsole.log('connected');\n\t\t\t\t});\n\n\t\t\t\tsocket.on('connect_error', () => {\n\t\t\t\t\treject(new Error('Connection error'));\n\t\t\t\t});\n\n\t\t\t\tsocket.disconnect();\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tthrow error;\n\t\t\t} finally {\n\t\t\t}\n\t\t});\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}