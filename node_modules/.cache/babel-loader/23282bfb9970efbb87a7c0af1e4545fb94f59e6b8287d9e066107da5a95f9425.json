{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { EventEmitter } from 'events';\nimport { miraiTestnet } from '../../constants/chains';\nimport { NotFoundMiraiConnectionError } from '../errors/NoConnectionError';\nexport function getEthereumChainId(chains) {\n  return chains[0].split(':')[1];\n}\nexport function toHexChainId(chainId) {\n  return chainId;\n}\n\n// helper type to force setting at least one value in an array\n\nexport class MiraiProvider {\n  constructor() {\n    _defineProperty(this, \"emitter\", new EventEmitter());\n    _defineProperty(this, \"accounts\", []);\n    _defineProperty(this, \"connection\", void 0);\n    _defineProperty(this, \"chainId\", miraiTestnet.id);\n    _defineProperty(this, \"on\", (event, listener) => {\n      this.emitter.on(event, listener);\n      return this;\n    });\n    _defineProperty(this, \"once\", (event, listener) => {\n      this.emitter.once(event, listener);\n      return this;\n    });\n    _defineProperty(this, \"removeListener\", (event, listener) => {\n      this.emitter.removeListener(event, listener);\n      return this;\n    });\n    _defineProperty(this, \"off\", (event, listener) => {\n      this.emitter.off(event, listener);\n      return this;\n    });\n    _defineProperty(this, \"parseAccount\", payload => {\n      console.log('payload', payload);\n      return this.parseAccountId(payload).address;\n    });\n  } // assigned during initialize\n  // this._signer = new SignerWebSocketService();\n\n  static async init(opts) {\n    const provider = new MiraiProvider();\n    await provider.initialize(opts);\n    return provider;\n  }\n  async request(args) {\n    return new Promise(async (resolve, reject) => {\n      const socket = await this.connection.ws.establish(true);\n      socket.on('exception', args => {\n        socket.disconnect();\n        reject(new Error(JSON.stringify(args)));\n      });\n      socket.on('connect', () => {\n        console.log(\"emitted to \".concat(this.connection.topicId), args);\n        socket.getSocket().emit(this.connection.topicId, args, data => {\n          console.log('data receive method', data);\n          if (data.code) {\n            reject(new Error(data.message));\n          }\n          resolve(data);\n        });\n      });\n      socket.on('connect_error', () => {\n        reject(new Error('Connection error'));\n      });\n      socket.connect();\n    });\n  }\n  async enable() {\n    const accounts = await this.request({\n      method: 'eth_requestAccounts'\n    });\n    return accounts;\n  }\n  async getChainId() {\n    const chain = await this.request({\n      method: 'eth_chainId'\n    });\n    return chain;\n  }\n  async connect(opts) {\n    if (!this.connection.isConnected()) {\n      throw new Error('Connection not initialized. Call MiraiConnection.init() first');\n    }\n    this.emitter.emit('connect', {\n      chainId: this.chainId\n    });\n  }\n  get isWalletConnect() {\n    return true;\n  }\n  switchEthereumChain(chainId) {\n    this.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{\n        chainId: chainId.toString(16)\n      }]\n    });\n  }\n  parseChainId(chainId) {\n    return Number(chainId.split(':')[1]);\n  }\n  setChainIds(chains) {\n    this.emitter.emit('chainChanged', this.chainId);\n    this.persist();\n  }\n  setChainId(chain) {\n    this.switchEthereumChain(chain);\n  }\n  parseAccountId(account) {\n    const [namespace, reference, address] = account.split(':');\n    const chainId = \"\".concat(namespace, \":\").concat(reference);\n    return {\n      chainId,\n      address\n    };\n  }\n  setAccounts(accounts) {\n    this.accounts = accounts.map(x => this.parseAccountId(x).address);\n    this.emitter.emit('accountsChanged', this.accounts);\n  }\n  async initialize(opts) {\n    this.connection = opts.connection;\n    if (!this.connection) {\n      throw new NotFoundMiraiConnectionError('No mirai connection found');\n    }\n    await this.registerEventListener();\n  }\n  async registerEventListener() {\n    return new Promise(async (resolve, reject) => {\n      const socket = await this.connection.ws.establish(true);\n      socket.on('exception', args => {\n        socket.disconnect();\n        reject(new Error(JSON.stringify(args)));\n      });\n      socket.on(this.connection.topicId, payload => {\n        const {\n          params\n        } = payload;\n        const {\n          event\n        } = params;\n        if (event.name === 'accountsChanged') {\n          this.accounts = this.parseAccounts(event.data);\n          this.emitter.emit('accountsChanged', this.accounts);\n        } else if (event.name === 'chainChanged') {\n          this.setChainId(event.data);\n        } else {\n          this.emitter.emit(event.name, event.data);\n        }\n      });\n      socket.on('connect_error', () => {\n        reject(new Error('Connection error'));\n      });\n      socket.connect();\n    });\n  }\n  reset() {\n    this.chainId = 1;\n    this.accounts = [];\n  }\n  persist() {}\n  parseAccounts(payload) {\n    if (typeof payload === 'string' || payload instanceof String) {\n      return [this.parseAccount(payload)];\n    }\n    return payload.map(account => this.parseAccount(account));\n  }\n}","map":{"version":3,"names":["EventEmitter","miraiTestnet","NotFoundMiraiConnectionError","getEthereumChainId","chains","split","toHexChainId","chainId","MiraiProvider","constructor","_defineProperty","id","event","listener","emitter","on","once","removeListener","off","payload","console","log","parseAccountId","address","init","opts","provider","initialize","request","args","Promise","resolve","reject","socket","connection","ws","establish","disconnect","Error","JSON","stringify","concat","topicId","getSocket","emit","data","code","message","connect","enable","accounts","method","getChainId","chain","isConnected","isWalletConnect","switchEthereumChain","params","toString","parseChainId","Number","setChainIds","persist","setChainId","account","namespace","reference","setAccounts","map","x","registerEventListener","name","parseAccounts","reset","String","parseAccount"],"sources":["/Users/phuocnd/phuocnd/works/mirai/miraiidjs/src/sign-provider/providers/mirai-provider.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport {\n\tIEthereumProvider as IProvider,\n\tIEthereumProviderEvents,\n\tProviderAccounts,\n\tRequestArguments,\n\tProviderChainId,\n\tRpcMethod,\n\tIProviderEvents,\n} from './types';\nimport { Connection } from '../connection/connection';\nimport { miraiTestnet } from '../../constants/chains';\nimport { NotFoundMiraiConnectionError } from '../errors/NoConnectionError';\n\nexport type RpcEvent = 'accountsChanged' | 'chainChanged' | 'message' | 'disconnect' | 'connect';\n\nexport interface EthereumRpcMap {\n\t[chainId: string]: string;\n}\n\nexport interface SessionEvent {\n\tevent: { name: string; data: any };\n\tchainId: string;\n}\n\nexport interface ConnectOps {\n\tchains?: string[];\n\toptionalChains?: number[];\n\trpcMap?: EthereumRpcMap;\n\tpairingTopic?: string;\n\tchainId: string;\n}\n\nexport interface IEthereumProvider extends IProvider {\n\tconnect(opts?: ConnectOps | undefined): Promise<void>;\n}\n\nexport function getEthereumChainId(chains: string[]): string {\n\treturn chains[0].split(':')[1];\n}\n\nexport function toHexChainId(chainId: string): string {\n\treturn chainId;\n}\n\n// helper type to force setting at least one value in an array\ntype ArrayOneOrMore<T> = {\n\t0: T;\n} & Array<T>;\n\nexport type EthereumProviderOptions = {\n\tconnection?: Connection;\n};\n\nexport type WalletConnectSession = {\n\ttopic: string;\n\texpiry: number;\n\tacknowledged: boolean;\n\tpairingTopic: string;\n\tcontroller: string;\n\tpeer: {\n\t\tpublicKey: string;\n\t\tmetadata: {\n\t\t\tname: string;\n\t\t\tdescription: string;\n\t\t\turl: string;\n\t\t\ticons: [];\n\t\t};\n\t};\n\tnamespaces?: {\n\t\t'eip155': {\n\t\t\taccounts: string[];\n\t\t\tevents: string[];\n\t\t};\n\t};\n};\n\nexport class MiraiProvider implements IEthereumProvider {\n\tpublic emitter = new EventEmitter();\n\tpublic accounts: string[] = [];\n\tprivate connection: Connection;\n\tpublic chainId = miraiTestnet.id;\n\n\tconstructor() {\n\t\t// assigned during initialize\n\t\t// this._signer = new SignerWebSocketService();\n\t}\n\n\tstatic async init(opts: EthereumProviderOptions): Promise<MiraiProvider> {\n\t\tconst provider = new MiraiProvider();\n\t\tawait provider.initialize(opts);\n\n\t\treturn provider;\n\t}\n\n\tpublic async request<T = unknown>(args: RequestArguments<RpcMethod>): Promise<T> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst socket = await this.connection.ws.establish(true);\n\n\t\t\tsocket.on('exception', (args: any) => {\n\t\t\t\tsocket.disconnect();\n\t\t\t\treject(new Error(JSON.stringify(args)));\n\t\t\t});\n\n\t\t\tsocket.on('connect', () => {\n\t\t\t\tconsole.log(`emitted to ${this.connection.topicId}`, args);\n\t\t\t\tsocket\n\t\t\t\t\t.getSocket()\n\t\t\t\t\t.emit(this.connection.topicId, args, (data: T & { code: number; message: string }) => {\n\t\t\t\t\t\tconsole.log('data receive method', data);\n\n\t\t\t\t\t\tif (data.code) {\n\t\t\t\t\t\t\treject(new Error(data.message));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve(data);\n\t\t\t\t\t});\n\t\t\t});\n\n\t\t\tsocket.on('connect_error', () => {\n\t\t\t\treject(new Error('Connection error'));\n\t\t\t});\n\n\t\t\tsocket.connect();\n\t\t});\n\t}\n\n\tpublic async enable(): Promise<ProviderAccounts> {\n\t\tconst accounts = await this.request<ProviderAccounts>({ method: 'eth_requestAccounts' });\n\t\treturn accounts as ProviderAccounts;\n\t}\n\n\tpublic async getChainId(): Promise<ProviderChainId> {\n\t\tconst chain = await this.request({ method: 'eth_chainId' });\n\n\t\treturn chain as ProviderChainId;\n\t}\n\n\tpublic async connect(opts?: ConnectOps): Promise<void> {\n\t\tif (!this.connection.isConnected()) {\n\t\t\tthrow new Error('Connection not initialized. Call MiraiConnection.init() first');\n\t\t}\n\n\t\tthis.emitter.emit('connect', { chainId: this.chainId });\n\t}\n\n\tpublic on: IEthereumProviderEvents['on'] = (event, listener) => {\n\t\tthis.emitter.on(event, listener);\n\t\treturn this;\n\t};\n\n\tpublic once: IEthereumProviderEvents['once'] = (event, listener) => {\n\t\tthis.emitter.once(event, listener);\n\t\treturn this;\n\t};\n\n\tpublic removeListener: IEthereumProviderEvents['removeListener'] = (event, listener) => {\n\t\tthis.emitter.removeListener(event, listener);\n\t\treturn this;\n\t};\n\n\tpublic off: IEthereumProviderEvents['off'] = (event, listener) => {\n\t\tthis.emitter.off(event, listener);\n\t\treturn this;\n\t};\n\n\tget isWalletConnect() {\n\t\treturn true;\n\t}\n\n\tprotected switchEthereumChain(chainId: number): void {\n\t\tthis.request({\n\t\t\tmethod: 'wallet_switchEthereumChain',\n\t\t\tparams: [{ chainId: chainId.toString(16) }],\n\t\t});\n\t}\n\n\tprotected parseChainId(chainId: string): number {\n\t\treturn Number(chainId.split(':')[1]);\n\t}\n\n\tprotected setChainIds(chains: string[]) {\n\t\tthis.emitter.emit('chainChanged', this.chainId);\n\t\tthis.persist();\n\t}\n\n\tprotected setChainId(chain: number) {\n\t\tthis.switchEthereumChain(chain);\n\t}\n\n\tprotected parseAccountId(account: string): { chainId: string; address: string } {\n\t\tconst [namespace, reference, address] = account.split(':');\n\t\tconst chainId = `${namespace}:${reference}`;\n\t\treturn { chainId, address };\n\t}\n\n\tprotected setAccounts(accounts: string[]) {\n\t\tthis.accounts = accounts.map((x) => this.parseAccountId(x).address);\n\n\t\tthis.emitter.emit('accountsChanged', this.accounts);\n\t}\n\n\tprotected async initialize(opts: EthereumProviderOptions) {\n\t\tthis.connection = opts.connection;\n\n\t\tif (!this.connection) {\n\t\t\tthrow new NotFoundMiraiConnectionError('No mirai connection found');\n\t\t}\n\n\t\tawait this.registerEventListener();\n\t}\n\n\tprivate async registerEventListener(): Promise<void> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst socket = await this.connection.ws.establish(true);\n\n\t\t\tsocket.on('exception', (args: any) => {\n\t\t\t\tsocket.disconnect();\n\t\t\t\treject(new Error(JSON.stringify(args)));\n\t\t\t});\n\n\t\t\tsocket.on(\n\t\t\t\tthis.connection.topicId,\n\t\t\t\t(\n\t\t\t\t\tpayload: IProviderEvents.BaseEventArgs<{\n\t\t\t\t\t\tevent: { name: string; data: any };\n\t\t\t\t\t\tchainId: string;\n\t\t\t\t\t}>,\n\t\t\t\t) => {\n\t\t\t\t\tconst { params } = payload;\n\t\t\t\t\tconst { event } = params;\n\t\t\t\t\tif (event.name === 'accountsChanged') {\n\t\t\t\t\t\tthis.accounts = this.parseAccounts(event.data);\n\t\t\t\t\t\tthis.emitter.emit('accountsChanged', this.accounts);\n\t\t\t\t\t} else if (event.name === 'chainChanged') {\n\t\t\t\t\t\tthis.setChainId(event.data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.emitter.emit(event.name as any, event.data);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tsocket.on('connect_error', () => {\n\t\t\t\treject(new Error('Connection error'));\n\t\t\t});\n\n\t\t\tsocket.connect();\n\t\t});\n\t}\n\n\tprotected reset() {\n\t\tthis.chainId = 1;\n\t\tthis.accounts = [];\n\t}\n\n\tprotected persist() {}\n\n\tprotected parseAccounts(payload: string | string[]): string[] {\n\t\tif (typeof payload === 'string' || payload instanceof String) {\n\t\t\treturn [this.parseAccount(payload)];\n\t\t}\n\t\treturn payload.map((account: string) => this.parseAccount(account));\n\t}\n\n\tprotected parseAccount = (payload: any): string => {\n\t\tconsole.log('payload', payload);\n\t\treturn this.parseAccountId(payload).address;\n\t};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}