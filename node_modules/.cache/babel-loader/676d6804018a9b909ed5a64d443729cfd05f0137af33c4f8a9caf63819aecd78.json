{"ast":null,"code":"import { observable, observe } from \"mobx\";\nconst state = observable({\n  open: false,\n  uri: null,\n  isUiLoaded: false\n});\nexport const ModalController = {\n  state,\n  subscribe(callback) {\n    console.log(\"here\");\n    return observe(state, change => {\n      console.log(\"new state received\", change.object);\n      callback(state);\n    });\n  },\n  close() {\n    state.open = false;\n  },\n  setIsUiLoaded(status) {\n    state.isUiLoaded = status;\n  },\n  async open(opts) {\n    console.log(\"state.isUiLoaded\", state.isUiLoaded);\n    return new Promise(resolve => {\n      // Open modal if essential async data is ready\n      if (state.isUiLoaded) {\n        state.open = true;\n        state.uri = opts.uri;\n        resolve();\n      }\n      // Otherwise (slow network) re-attempt open checks\n      else {\n        const interval = setInterval(() => {\n          if (state.isUiLoaded) {\n            clearInterval(interval);\n            state.open = true;\n            state.uri = opts.uri;\n            resolve();\n          }\n        }, 200);\n      }\n    });\n  }\n};","map":{"version":3,"names":["observable","observe","state","open","uri","isUiLoaded","ModalController","subscribe","callback","console","log","change","object","close","setIsUiLoaded","status","opts","Promise","resolve","interval","setInterval","clearInterval"],"sources":["/Users/phuocnd/phuocnd/works/mirai/mirai-modal/src/core/controllers/ModalController.ts"],"sourcesContent":["import { observable, observe } from \"mobx\";\n\nexport type IModalState = {\n  open: boolean;\n  isUiLoaded: boolean;\n  uri: string | null;\n};\n\ntype Options = {\n  uri: string;\n};\n\nconst state = observable<IModalState>({\n  open: false,\n  uri: null,\n  isUiLoaded: false,\n});\n\nexport const ModalController = {\n  state,\n  subscribe(callback: (newState: IModalState) => void) {\n    console.log(\"here\");\n    return observe(state, (change) => {\n      console.log(\"new state received\", change.object);\n      callback(state);\n    });\n  },\n  close() {\n    state.open = false;\n  },\n  setIsUiLoaded(status: boolean) {\n    state.isUiLoaded = status;\n  },\n  async open(opts: Options) {\n    console.log(\"state.isUiLoaded\", state.isUiLoaded);\n\n    return new Promise<void>((resolve) => {\n      // Open modal if essential async data is ready\n      if (state.isUiLoaded) {\n        state.open = true;\n        state.uri = opts.uri;\n        resolve();\n      }\n      // Otherwise (slow network) re-attempt open checks\n      else {\n        const interval = setInterval(() => {\n          if (state.isUiLoaded) {\n            clearInterval(interval);\n            state.open = true;\n            state.uri = opts.uri;\n            resolve();\n          }\n        }, 200);\n      }\n    });\n  },\n};\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,OAAO,QAAQ,MAAM;AAY1C,MAAMC,KAAK,GAAGF,UAAU,CAAc;EACpCG,IAAI,EAAE,KAAK;EACXC,GAAG,EAAE,IAAI;EACTC,UAAU,EAAE;AACd,CAAC,CAAC;AAEF,OAAO,MAAMC,eAAe,GAAG;EAC7BJ,KAAK;EACLK,SAASA,CAACC,QAAyC,EAAE;IACnDC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB,OAAOT,OAAO,CAACC,KAAK,EAAGS,MAAM,IAAK;MAChCF,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEC,MAAM,CAACC,MAAM,CAAC;MAChDJ,QAAQ,CAACN,KAAK,CAAC;IACjB,CAAC,CAAC;EACJ,CAAC;EACDW,KAAKA,CAAA,EAAG;IACNX,KAAK,CAACC,IAAI,GAAG,KAAK;EACpB,CAAC;EACDW,aAAaA,CAACC,MAAe,EAAE;IAC7Bb,KAAK,CAACG,UAAU,GAAGU,MAAM;EAC3B,CAAC;EACD,MAAMZ,IAAIA,CAACa,IAAa,EAAE;IACxBP,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAER,KAAK,CAACG,UAAU,CAAC;IAEjD,OAAO,IAAIY,OAAO,CAAQC,OAAO,IAAK;MACpC;MACA,IAAIhB,KAAK,CAACG,UAAU,EAAE;QACpBH,KAAK,CAACC,IAAI,GAAG,IAAI;QACjBD,KAAK,CAACE,GAAG,GAAGY,IAAI,CAACZ,GAAG;QACpBc,OAAO,CAAC,CAAC;MACX;MACA;MAAA,KACK;QACH,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;UACjC,IAAIlB,KAAK,CAACG,UAAU,EAAE;YACpBgB,aAAa,CAACF,QAAQ,CAAC;YACvBjB,KAAK,CAACC,IAAI,GAAG,IAAI;YACjBD,KAAK,CAACE,GAAG,GAAGY,IAAI,CAACZ,GAAG;YACpBc,OAAO,CAAC,CAAC;UACX;QACF,CAAC,EAAE,GAAG,CAAC;MACT;IACF,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}