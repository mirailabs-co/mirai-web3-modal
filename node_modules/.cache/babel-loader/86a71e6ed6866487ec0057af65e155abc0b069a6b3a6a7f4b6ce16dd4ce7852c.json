{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as base64 from 'base64-js';\nimport crypto from 'crypto';\nconst HAS_CRYPTO = typeof window !== 'undefined' && !!window.crypto;\nconst HAS_SUBTLE_CRYPTO = HAS_CRYPTO && !!window.crypto.subtle;\nconst CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nexport function bufferToString(buffer) {\n  let state = [];\n  for (let i = 0; i < buffer.byteLength; i += 1) {\n    let index = buffer[i] % CHARSET.length;\n    state.push(CHARSET[index]);\n  }\n  return state.join('');\n}\nexport function urlSafe(buffer) {\n  const encoded = base64.fromByteArray(new Uint8Array(buffer));\n  return encoded.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\n// adapted from source: http://stackoverflow.com/a/11058858\n// this is used in place of TextEncode as the api is not yet\n// well supported: https://caniuse.com/#search=TextEncoder\nexport function textEncodeLite(str) {\n  const buf = new ArrayBuffer(str.length);\n  const bufView = new Uint8Array(buf);\n  for (let i = 0; i < str.length; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufView;\n}\n/**\n * The default implementation of the `Crypto` interface.\n * This uses the capabilities of the browser.\n */\nexport class DefaultCrypto {\n  constructor() {\n    _defineProperty(this, \"subtle\", void 0);\n  }\n  generateRandom(size) {\n    const buffer = new Uint8Array(size);\n    if (HAS_CRYPTO) {\n      window.crypto.getRandomValues(buffer);\n    } else {\n      // fall back to Math.random() if nothing else is available\n      for (let i = 0; i < size; i += 1) {\n        buffer[i] = Math.random() * CHARSET.length | 0;\n      }\n    }\n    return bufferToString(buffer);\n  }\n  deriveChallenge(code) {\n    if (code.length < 43 || code.length > 128) {\n      return Promise.reject(new Error('Invalid code length.'));\n    }\n    if (!HAS_SUBTLE_CRYPTO) {\n      return Promise.reject(new Error('window.crypto.subtle is unavailable.'));\n    }\n    return new Promise((resolve, reject) => {\n      crypto.subtle.digest('SHA-256', textEncodeLite(code)).then(buffer => {\n        return resolve(urlSafe(new Uint8Array(buffer)));\n      }, error => reject(error));\n    });\n  }\n}","map":{"version":3,"names":["base64","crypto","HAS_CRYPTO","window","HAS_SUBTLE_CRYPTO","subtle","CHARSET","bufferToString","buffer","state","i","byteLength","index","length","push","join","urlSafe","encoded","fromByteArray","Uint8Array","replace","textEncodeLite","str","buf","ArrayBuffer","bufView","charCodeAt","DefaultCrypto","constructor","_defineProperty","generateRandom","size","getRandomValues","Math","random","deriveChallenge","code","Promise","reject","Error","resolve","digest","then","error"],"sources":["/Users/phuocnd/phuocnd/works/mirai/miraiidjs/src/auth-client/utils/crypto-utils.ts"],"sourcesContent":["/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as base64 from 'base64-js';\n\nimport crypto from 'crypto';\n\nconst HAS_CRYPTO = typeof window !== 'undefined' && !!(window.crypto as any);\nconst HAS_SUBTLE_CRYPTO = HAS_CRYPTO && !!(window.crypto.subtle as any);\nconst CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\nexport function bufferToString(buffer: Uint8Array) {\n\tlet state = [];\n\tfor (let i = 0; i < buffer.byteLength; i += 1) {\n\t\tlet index = buffer[i] % CHARSET.length;\n\t\tstate.push(CHARSET[index]);\n\t}\n\treturn state.join('');\n}\n\nexport function urlSafe(buffer: Uint8Array): string {\n\tconst encoded = base64.fromByteArray(new Uint8Array(buffer));\n\treturn encoded.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\n// adapted from source: http://stackoverflow.com/a/11058858\n// this is used in place of TextEncode as the api is not yet\n// well supported: https://caniuse.com/#search=TextEncoder\nexport function textEncodeLite(str: string) {\n\tconst buf = new ArrayBuffer(str.length);\n\tconst bufView = new Uint8Array(buf);\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tbufView[i] = str.charCodeAt(i);\n\t}\n\treturn bufView;\n}\n\nexport interface Crypto {\n\t/**\n\t * Generate a random string\n\t */\n\tgenerateRandom(size: number): string;\n\t/**\n\t * Compute the SHA256 of a given code.\n\t * This is useful when using PKCE.\n\t */\n\tderiveChallenge(code: string): Promise<string>;\n}\n\n/**\n * The default implementation of the `Crypto` interface.\n * This uses the capabilities of the browser.\n */\nexport class DefaultCrypto implements Crypto {\n\tsubtle: '';\n\tgenerateRandom(size: number) {\n\t\tconst buffer = new Uint8Array(size);\n\t\tif (HAS_CRYPTO) {\n\t\t\twindow.crypto.getRandomValues(buffer);\n\t\t} else {\n\t\t\t// fall back to Math.random() if nothing else is available\n\t\t\tfor (let i = 0; i < size; i += 1) {\n\t\t\t\tbuffer[i] = (Math.random() * CHARSET.length) | 0;\n\t\t\t}\n\t\t}\n\t\treturn bufferToString(buffer);\n\t}\n\n\tderiveChallenge(code: string): Promise<string> {\n\t\tif (code.length < 43 || code.length > 128) {\n\t\t\treturn Promise.reject(new Error('Invalid code length.'));\n\t\t}\n\t\tif (!HAS_SUBTLE_CRYPTO) {\n\t\t\treturn Promise.reject(new Error('window.crypto.subtle is unavailable.'));\n\t\t}\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcrypto.subtle.digest('SHA-256', textEncodeLite(code)).then(\n\t\t\t\t(buffer) => {\n\t\t\t\t\treturn resolve(urlSafe(new Uint8Array(buffer)));\n\t\t\t\t},\n\t\t\t\t(error) => reject(error),\n\t\t\t);\n\t\t});\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}