{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport axios from 'axios';\nimport { MiraiConnection } from '../connection/mirai-connection';\nimport { Core } from './core';\nimport { ServiceQueryRequest } from '../../shared/service-query-request';\nconst PAIRING_URL = 'http://localhost:3000/get-pairing';\nconst MIRAI_SIGN_PAGE = 'http://id-web-local.mirailabs.co/sign?a=1';\nexport class MiraiCore extends Core {\n  constructor(opts) {\n    super(opts);\n    _defineProperty(this, \"chains\", void 0);\n    _defineProperty(this, \"namespace\", void 0);\n    _defineProperty(this, \"connections\", void 0);\n    _defineProperty(this, \"onOpenConnectionModal\", void 0);\n    _defineProperty(this, \"onCloseConnectionModal\", void 0);\n    this.chains = opts.chains;\n    this.namespace = opts.chainNameSpace;\n    this.onOpenConnectionModal = opts.onOpenConnectionModal;\n    this.onCloseConnectionModal = opts.onCloseConnectionModal;\n  }\n  static async init(opts) {\n    const core = new MiraiCore(opts);\n    await core.initialize();\n    return core;\n  }\n  async connect(_ref) {\n    let {\n      accessToken\n    } = _ref;\n    const newConnection = await MiraiConnection.init();\n    newConnection.emit('chains', this.chains);\n    newConnection.emit('namespace', this.namespace);\n    this.emit('connecting');\n    const isConnected = await newConnection.connect({\n      accessToken\n    });\n    if (isConnected) {\n      this.connections[newConnection.topicId] = newConnection;\n      this.emit('connected', {\n        topicId: newConnection.topicId\n      });\n    }\n    return newConnection;\n  }\n  async getConnection(_ref2) {\n    let {\n      topicId\n    } = _ref2;\n    return this.connections[topicId];\n  }\n  async showConnectionModal(connection) {\n    const topicId = connection.topicId;\n    console.log('topicId', topicId);\n\n    // We're get pairing uri\n    const {\n      data\n    } = await axios.get(\"\".concat(PAIRING_URL, \"?topicId=\").concat(topicId));\n    console.log('Get Pairing URI', data);\n\n    // FIX BUG ADD_PARAM\n    const url = new URL(MIRAI_SIGN_PAGE);\n    const __serviceQuery = new ServiceQueryRequest(url.href, url.searchParams.toString());\n    __serviceQuery.addParam('topicId', topicId);\n    __serviceQuery.addParam('wc_uri', data);\n    if (data) {\n      typeof this.onOpenConnectionModal === 'function' && (await this.onOpenConnectionModal(connection, __serviceQuery.toUri()));\n    }\n  }\n  async disconect(connection) {\n    if (connection) {\n      await connection.disconnect();\n    }\n  }\n  disconectAll() {\n    throw new Error('Method not implemented.');\n  }\n\n  // PRIVATE\n  async initialize() {\n    try {\n      // FOR INITIALIZE SOMETHING\n\n      this.connections = {};\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}","map":{"version":3,"names":["axios","MiraiConnection","Core","ServiceQueryRequest","PAIRING_URL","MIRAI_SIGN_PAGE","MiraiCore","constructor","opts","_defineProperty","chains","namespace","chainNameSpace","onOpenConnectionModal","onCloseConnectionModal","init","core","initialize","connect","_ref","accessToken","newConnection","emit","isConnected","connections","topicId","getConnection","_ref2","showConnectionModal","connection","console","log","data","get","concat","url","URL","__serviceQuery","href","searchParams","toString","addParam","toUri","disconect","disconnect","disconectAll","Error","e","error"],"sources":["/Users/phuocnd/phuocnd/works/mirai/miraiidjs/src/sign-provider/cores/mirai-core.ts"],"sourcesContent":["import axios from 'axios';\nimport { MiraiConnection } from '../connection/mirai-connection';\nimport { Core, ICore } from './core';\nimport { Connection } from '../connection/connection';\nimport { Chain } from '../../constants/chains';\nimport { ServiceQueryRequest } from '../../shared/service-query-request';\nimport { MiraiProvider } from '../providers/mirai-provider';\n\nconst PAIRING_URL: string = 'http://localhost:3000/get-pairing';\nconst MIRAI_SIGN_PAGE: string = 'http://id-web-local.mirailabs.co/sign?a=1';\n\nexport class MiraiCore extends Core {\n\tchains: string[];\n\tnamespace: string;\n\tconnections: Record<string, MiraiConnection>;\n\n\tonOpenConnectionModal: (connnection: Connection, url: string) => Promise<void>;\n\tonCloseConnectionModal: (connnection: Connection) => Promise<void>;\n\n\tconstructor(opts?: ICore) {\n\t\tsuper(opts);\n\n\t\tthis.chains = opts.chains;\n\t\tthis.namespace = opts.chainNameSpace;\n\t\tthis.onOpenConnectionModal = opts.onOpenConnectionModal;\n\t\tthis.onCloseConnectionModal = opts.onCloseConnectionModal;\n\t}\n\n\tstatic async init(opts?: ICore) {\n\t\tconst core = new MiraiCore(opts);\n\t\tawait core.initialize();\n\n\t\treturn core;\n\t}\n\n\tpublic async connect({ accessToken }: { accessToken: string }) {\n\t\tconst newConnection = await MiraiConnection.init();\n\n\t\tnewConnection.emit('chains', this.chains);\n\t\tnewConnection.emit('namespace', this.namespace);\n\t\tthis.emit('connecting');\n\t\tconst isConnected = await newConnection.connect({ accessToken });\n\n\t\tif (isConnected) {\n\t\t\tthis.connections[newConnection.topicId] = newConnection;\n\t\t\tthis.emit('connected', { topicId: newConnection.topicId });\n\t\t}\n\n\t\treturn newConnection;\n\t}\n\n\tpublic async getConnection({ topicId }: { topicId: string }): Promise<Connection> {\n\t\treturn this.connections[topicId];\n\t}\n\n\tpublic async showConnectionModal(connection: MiraiConnection) {\n\t\tconst topicId = connection.topicId;\n\n\t\tconsole.log('topicId', topicId);\n\n\t\t// We're get pairing uri\n\t\tconst { data } = await axios.get(`${PAIRING_URL}?topicId=${topicId}`);\n\n\t\tconsole.log('Get Pairing URI', data);\n\n\t\t// FIX BUG ADD_PARAM\n\t\tconst url = new URL(MIRAI_SIGN_PAGE);\n\t\tconst __serviceQuery = new ServiceQueryRequest(url.href, url.searchParams.toString());\n\n\t\t__serviceQuery.addParam('topicId', topicId);\n\t\t__serviceQuery.addParam('wc_uri', data);\n\n\t\tif (data) {\n\t\t\ttypeof this.onOpenConnectionModal === 'function' &&\n\t\t\t\t(await this.onOpenConnectionModal(connection, __serviceQuery.toUri()));\n\t\t}\n\t}\n\n\tpublic async disconect(connection: Connection): Promise<void> {\n\t\tif (connection) {\n\t\t\tawait connection.disconnect();\n\t\t}\n\t}\n\n\tpublic disconectAll(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\t// PRIVATE\n\tasync initialize() {\n\t\ttry {\n\t\t\t// FOR INITIALIZE SOMETHING\n\n\t\t\tthis.connections = {};\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}