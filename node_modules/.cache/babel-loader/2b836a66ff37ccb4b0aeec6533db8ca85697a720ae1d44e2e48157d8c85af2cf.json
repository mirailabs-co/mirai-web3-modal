{"ast":null,"code":"import jwt_decode from 'jwt-decode';\nimport { NoAccessToken, SDKError } from '../sign-provider/errors';\nexport const parseUserInfoFromAccessToken = async accessToken => {\n  if (!accessToken) {\n    throw new NoAccessToken(SDKError.NotFoundAccessToken, 'No access token found');\n  }\n  try {\n    return await jwt_decode(accessToken);\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};","map":{"version":3,"names":["jwt_decode","NoAccessToken","SDKError","parseUserInfoFromAccessToken","accessToken","NotFoundAccessToken","e","console","log"],"sources":["/Users/phuocnd/phuocnd/works/mirai/miraiidjs/src/utils/auth-util.ts"],"sourcesContent":["import jwt_decode from 'jwt-decode';\nimport { NoAccessToken, SDKError } from '../sign-provider/errors';\nimport { auth } from '..';\n\nexport const parseUserInfoFromAccessToken = async (accessToken: string): Promise<auth.TMiraiAccessToken> => {\n\tif (!accessToken) {\n\t\tthrow new NoAccessToken(SDKError.NotFoundAccessToken, 'No access token found');\n\t}\n\n\ttry {\n\t\treturn (await jwt_decode(accessToken)) as auth.TMiraiAccessToken;\n\t} catch (e) {\n\t\tconsole.log(e);\n\t}\n\n\treturn null;\n};\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,YAAY;AACnC,SAASC,aAAa,EAAEC,QAAQ,QAAQ,yBAAyB;AAGjE,OAAO,MAAMC,4BAA4B,GAAG,MAAOC,WAAmB,IAAsC;EAC3G,IAAI,CAACA,WAAW,EAAE;IACjB,MAAM,IAAIH,aAAa,CAACC,QAAQ,CAACG,mBAAmB,EAAE,uBAAuB,CAAC;EAC/E;EAEA,IAAI;IACH,OAAQ,MAAML,UAAU,CAACI,WAAW,CAAC;EACtC,CAAC,CAAC,OAAOE,CAAC,EAAE;IACXC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;EACf;EAEA,OAAO,IAAI;AACZ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}