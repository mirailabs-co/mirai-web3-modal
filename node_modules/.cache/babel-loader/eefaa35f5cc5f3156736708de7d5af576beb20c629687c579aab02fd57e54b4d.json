{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport EventEmitter from 'eventemitter3';\n\n// export type State = {\n// \tchains?: Connector['chains'];\n// \tconnector?: Connector;\n// \tconnectors: Connector[];\n// \tstatus: 'connected' | 'connecting' | 'reconnecting' | 'disconnected';\n// };\nexport class Core extends EventEmitter {\n  constructor(opts) {\n    super();\n    _defineProperty(this, \"connections\", void 0);\n    _defineProperty(this, \"chains\", void 0);\n    _defineProperty(this, \"namespace\", void 0);\n  }\n\n  // CONNECTION\n}","map":{"version":3,"names":["EventEmitter","Core","constructor","opts","_defineProperty"],"sources":["/Users/phuocnd/phuocnd/works/mirai/miraiidjs/src/sign-provider/cores/core.ts"],"sourcesContent":["import { Connection } from '../connection/connection';\nimport { Chain } from '../../constants/chains';\nimport EventEmitter from 'eventemitter3';\n\n// export type State = {\n// \tchains?: Connector['chains'];\n// \tconnector?: Connector;\n// \tconnectors: Connector[];\n// \tstatus: 'connected' | 'connecting' | 'reconnecting' | 'disconnected';\n// };\n\nexport type ICore = {\n\tclientId: string;\n\tmetaData: { name: string; description: string; icons: string[] };\n\tredirectUrl: string;\n\tchains: string[];\n\tchainNameSpace: string;\n\tonOpenConnectionModal(connection: Connection, url: string): Promise<void>;\n\tonCloseConnectionModal?(connection: Connection): Promise<void>;\n};\n\nexport type CoreEventType = 'connected' | 'connecting' | 'reconnecting' | 'disconnected';\n\nexport interface EventArguments {\n\tconnecting: void;\n\tconnected: {\n\t\ttopicId: string;\n\t};\n\treconnecting: void;\n\tdisconnected: void;\n}\n\nexport abstract class Core extends EventEmitter<CoreEventType> {\n\tconstructor(opts: ICore) {\n\t\tsuper();\n\t}\n\n\tabstract connections: Record<string, Connection>;\n\tabstract chains: string[];\n\tabstract namespace: string;\n\n\t// CONNECTION\n\tpublic abstract connect({ accessToken }: { accessToken: string }): Promise<Connection>;\n\tpublic abstract disconect(connection: Connection): Promise<void>;\n\tpublic abstract disconectAll(): Promise<void>;\n\tpublic abstract getConnection({ topicId }: { topicId: string }): Promise<Connection>;\n}\n\nexport interface ICoreEvent {\n\ton: <E extends CoreEventType>(event: E, listener: (args: EventArguments[E]) => void) => Core;\n}\n"],"mappings":";AAEA,OAAOA,YAAY,MAAM,eAAe;;AAExC;AACA;AACA;AACA;AACA;AACA;AAuBA,OAAO,MAAeC,IAAI,SAASD,YAAY,CAAgB;EAC9DE,WAAWA,CAACC,IAAW,EAAE;IACxB,KAAK,CAAC,CAAC;IAACC,eAAA;IAAAA,eAAA;IAAAA,eAAA;EACT;;EAMA;AAKD"},"metadata":{},"sourceType":"module","externalDependencies":[]}