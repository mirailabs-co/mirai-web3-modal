{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport EventEmitter from 'eventemitter3';\nimport { SignerWebSocketService } from '../transports/websocket/ws-signer';\nimport { CONNECTION_EVENTS, Connection } from './connection';\nexport const MiraiRelayerUrl = 'ws://localhost:3000';\n// export const MiraiRelayerUrl: string = 'wss://id-api-dev.mirailabs.co/mpc';\n\nexport class MiraiConnection extends Connection {\n  constructor(opts) {\n    super(opts);\n    _defineProperty(this, \"events\", new EventEmitter());\n    _defineProperty(this, \"pending\", false);\n    _defineProperty(this, \"initializing\", false);\n    _defineProperty(this, \"initialized\", false);\n    // FOR WS CONNECTION\n    _defineProperty(this, \"auth\", void 0);\n    _defineProperty(this, \"ws\", void 0);\n  }\n  static async init(_ref) {\n    let {\n      auth\n    } = _ref;\n    const connection = new MiraiConnection({\n      auth,\n      relayerUrl: MiraiRelayerUrl\n    });\n    await connection.initialize();\n    return connection;\n  }\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n  isConnected() {\n    return this.initialized;\n  }\n  setAuthToken(token) {\n    this.auth = token;\n  }\n\n  // PRIVATE\n  async initialize() {\n    if (this.pending) {\n      return new Promise((resolve, reject) => {\n        this.events.once(CONNECTION_EVENTS.open, () => {\n          this.events.once(CONNECTION_EVENTS.open_error, error => {\n            reject(error);\n          });\n          if (typeof this.ws === 'undefined') {\n            return reject(new Error('WS not initialized'));\n          }\n          resolve();\n        });\n      });\n    }\n    try {\n      this.pending = true;\n      await this.register();\n      const connected = await this.connect();\n      this.events.emit(CONNECTION_EVENTS.open);\n      if (connected) {\n        this.initialized = true;\n      }\n    } catch (e) {\n      this.events.emit(CONNECTION_EVENTS.open_error, e);\n      throw e;\n    }\n  }\n  async register() {\n    if (typeof this.ws !== 'undefined') {\n      return this.ws;\n    }\n    if (this.initializing) {\n      return new Promise((resolve, reject) => {\n        this.events.once(CONNECTION_EVENTS.register_error, error => {\n          reject(error);\n        });\n        this.events.once(CONNECTION_EVENTS.init, () => {\n          if (typeof this.ws === 'undefined') {\n            return reject(new Error('WS not initialized'));\n          }\n          resolve(this.ws);\n        });\n      });\n    }\n    try {\n      this.initializing = true;\n      this.ws = new SignerWebSocketService({\n        url: MiraiRelayerUrl,\n        authToken: this.auth\n      });\n      this.initializing = false;\n      this.events.emit(CONNECTION_EVENTS.init);\n      return this.ws;\n    } catch (e) {\n      this.events.emit(CONNECTION_EVENTS.register_error, e);\n      throw e;\n    }\n  }\n  async connect() {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const socket = await this.ws.establish(true);\n        socket.on('exception', args => {\n          socket.disconnect();\n          this.events.emit(CONNECTION_EVENTS.error, new Error(JSON.stringify(args)));\n          reject(false);\n        });\n        socket.on('connect', e => {\n          this.events.emit(CONNECTION_EVENTS.connected);\n          resolve(true);\n        });\n        socket.on('connect_error', () => {\n          this.events.emit(CONNECTION_EVENTS.error, new Error(JSON.stringify('Connection error')));\n          reject(false);\n        });\n        socket.connect();\n      } catch (error) {\n        console.error(error);\n        throw error;\n      } finally {}\n    });\n  }\n  async disconnect() {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const socket = await this.ws.establish(true);\n        socket.on('exception', args => {\n          socket.disconnect();\n          this.events.emit(CONNECTION_EVENTS.open_error, new Error(JSON.stringify(args)));\n          reject(new Error(JSON.stringify(args)));\n        });\n        console.time('WS get-pail');\n        socket.on('connect', () => {\n          console.log('connected');\n        });\n        socket.on('connect_error', () => {\n          reject(new Error('Connection error'));\n        });\n        socket.disconnect();\n      } catch (error) {\n        console.error(error);\n        throw error;\n      } finally {}\n    });\n  }\n}","map":{"version":3,"names":["EventEmitter","SignerWebSocketService","CONNECTION_EVENTS","Connection","MiraiRelayerUrl","MiraiConnection","constructor","opts","_defineProperty","init","_ref","auth","connection","relayerUrl","initialize","on","event","listener","events","once","off","removeListener","isConnected","initialized","setAuthToken","token","pending","Promise","resolve","reject","open","open_error","error","ws","Error","register","connected","connect","emit","e","initializing","register_error","url","authToken","socket","establish","args","disconnect","JSON","stringify","console","time","log"],"sources":["/Users/phuocnd/phuocnd/works/mirai/miraiidjs/src/sign-provider/connection/mirai-connection.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { SignerWebSocketService } from '../transports/websocket/ws-signer';\nimport { CONNECTION_EVENTS, Connection, ConnectionOpts } from './connection';\nimport { auth } from '../../auth-client';\n\nexport const MiraiRelayerUrl: string = 'ws://localhost:3000';\n// export const MiraiRelayerUrl: string = 'wss://id-api-dev.mirailabs.co/mpc';\n\nexport class MiraiConnection extends Connection {\n\tpublic events: any = new EventEmitter();\n\n\tprivate pending = false;\n\tprivate initializing = false;\n\tprivate initialized = false;\n\n\t// FOR WS CONNECTION\n\tpublic auth: auth.TMiraiToken;\n\tpublic ws: InstanceType<typeof SignerWebSocketService>;\n\n\tconstructor(opts: ConnectionOpts) {\n\t\tsuper(opts);\n\t}\n\n\tpublic static async init({ auth }: { auth: auth.TMiraiToken }) {\n\t\tconst connection = new MiraiConnection({ auth, relayerUrl: MiraiRelayerUrl });\n\n\t\tawait connection.initialize();\n\n\t\treturn connection;\n\t}\n\n\tpublic on(event: string, listener: any) {\n\t\tthis.events.on(event, listener);\n\t}\n\n\tpublic once(event: string, listener: any) {\n\t\tthis.events.once(event, listener);\n\t}\n\n\tpublic off(event: string, listener: any) {\n\t\tthis.events.off(event, listener);\n\t}\n\n\tpublic removeListener(event: string, listener: any) {\n\t\tthis.events.removeListener(event, listener);\n\t}\n\n\tpublic isConnected(): boolean {\n\t\treturn this.initialized;\n\t}\n\n\tpublic setAuthToken(token: auth.TMiraiToken): void {\n\t\tthis.auth = token;\n\t}\n\n\t// PRIVATE\n\tprivate async initialize(): Promise<void> {\n\t\tif (this.pending) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.events.once(CONNECTION_EVENTS.open, () => {\n\t\t\t\t\tthis.events.once(CONNECTION_EVENTS.open_error, (error: any) => {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t});\n\t\t\t\t\tif (typeof this.ws === 'undefined') {\n\t\t\t\t\t\treturn reject(new Error('WS not initialized'));\n\t\t\t\t\t}\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\ttry {\n\t\t\tthis.pending = true;\n\t\t\tawait this.register();\n\t\t\tconst connected = await this.connect();\n\n\t\t\tthis.events.emit(CONNECTION_EVENTS.open);\n\n\t\t\tif (connected) {\n\t\t\t\tthis.initialized = true;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.events.emit(CONNECTION_EVENTS.open_error, e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprivate async register(): Promise<SignerWebSocketService> {\n\t\tif (typeof this.ws !== 'undefined') {\n\t\t\treturn this.ws;\n\t\t}\n\n\t\tif (this.initializing) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.events.once(CONNECTION_EVENTS.register_error, (error: any) => {\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t\t\tthis.events.once(CONNECTION_EVENTS.init, () => {\n\t\t\t\t\tif (typeof this.ws === 'undefined') {\n\t\t\t\t\t\treturn reject(new Error('WS not initialized'));\n\t\t\t\t\t}\n\t\t\t\t\tresolve(this.ws);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\ttry {\n\t\t\tthis.initializing = true;\n\n\t\t\tthis.ws = new SignerWebSocketService({\n\t\t\t\turl: MiraiRelayerUrl,\n\t\t\t\tauthToken: this.auth,\n\t\t\t});\n\n\t\t\tthis.initializing = false;\n\t\t\tthis.events.emit(CONNECTION_EVENTS.init);\n\t\t\treturn this.ws;\n\t\t} catch (e) {\n\t\t\tthis.events.emit(CONNECTION_EVENTS.register_error, e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tpublic async connect(): Promise<boolean> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst socket = await this.ws.establish(true);\n\n\t\t\t\tsocket.on('exception', (args: any) => {\n\t\t\t\t\tsocket.disconnect();\n\t\t\t\t\tthis.events.emit(CONNECTION_EVENTS.error, new Error(JSON.stringify(args)));\n\n\t\t\t\t\treject(false);\n\t\t\t\t});\n\n\t\t\t\tsocket.on('connect', (e: any) => {\n\t\t\t\t\tthis.events.emit(CONNECTION_EVENTS.connected);\n\n\t\t\t\t\tresolve(true);\n\t\t\t\t});\n\n\t\t\t\tsocket.on('connect_error', () => {\n\t\t\t\t\tthis.events.emit(CONNECTION_EVENTS.error, new Error(JSON.stringify('Connection error')));\n\t\t\t\t\treject(false);\n\t\t\t\t});\n\n\t\t\t\tsocket.connect();\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tthrow error;\n\t\t\t} finally {\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async disconnect(): Promise<void> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst socket = await this.ws.establish(true);\n\n\t\t\t\tsocket.on('exception', (args: any) => {\n\t\t\t\t\tsocket.disconnect();\n\t\t\t\t\tthis.events.emit(CONNECTION_EVENTS.open_error, new Error(JSON.stringify(args)));\n\n\t\t\t\t\treject(new Error(JSON.stringify(args)));\n\t\t\t\t});\n\n\t\t\t\tconsole.time('WS get-pail');\n\t\t\t\tsocket.on('connect', () => {\n\t\t\t\t\tconsole.log('connected');\n\t\t\t\t});\n\n\t\t\t\tsocket.on('connect_error', () => {\n\t\t\t\t\treject(new Error('Connection error'));\n\t\t\t\t});\n\n\t\t\t\tsocket.disconnect();\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tthrow error;\n\t\t\t} finally {\n\t\t\t}\n\t\t});\n\t}\n}\n"],"mappings":";AAAA,OAAOA,YAAY,MAAM,eAAe;AACxC,SAASC,sBAAsB,QAAQ,mCAAmC;AAC1E,SAASC,iBAAiB,EAAEC,UAAU,QAAwB,cAAc;AAG5E,OAAO,MAAMC,eAAuB,GAAG,qBAAqB;AAC5D;;AAEA,OAAO,MAAMC,eAAe,SAASF,UAAU,CAAC;EAW/CG,WAAWA,CAACC,IAAoB,EAAE;IACjC,KAAK,CAACA,IAAI,CAAC;IAACC,eAAA,iBAXQ,IAAIR,YAAY,CAAC,CAAC;IAAAQ,eAAA,kBAErB,KAAK;IAAAA,eAAA,uBACA,KAAK;IAAAA,eAAA,sBACN,KAAK;IAE3B;IAAAA,eAAA;IAAAA,eAAA;EAMA;EAEA,aAAoBC,IAAIA,CAAAC,IAAA,EAAuC;IAAA,IAAtC;MAAEC;IAAiC,CAAC,GAAAD,IAAA;IAC5D,MAAME,UAAU,GAAG,IAAIP,eAAe,CAAC;MAAEM,IAAI;MAAEE,UAAU,EAAET;IAAgB,CAAC,CAAC;IAE7E,MAAMQ,UAAU,CAACE,UAAU,CAAC,CAAC;IAE7B,OAAOF,UAAU;EAClB;EAEOG,EAAEA,CAACC,KAAa,EAAEC,QAAa,EAAE;IACvC,IAAI,CAACC,MAAM,CAACH,EAAE,CAACC,KAAK,EAAEC,QAAQ,CAAC;EAChC;EAEOE,IAAIA,CAACH,KAAa,EAAEC,QAAa,EAAE;IACzC,IAAI,CAACC,MAAM,CAACC,IAAI,CAACH,KAAK,EAAEC,QAAQ,CAAC;EAClC;EAEOG,GAAGA,CAACJ,KAAa,EAAEC,QAAa,EAAE;IACxC,IAAI,CAACC,MAAM,CAACE,GAAG,CAACJ,KAAK,EAAEC,QAAQ,CAAC;EACjC;EAEOI,cAAcA,CAACL,KAAa,EAAEC,QAAa,EAAE;IACnD,IAAI,CAACC,MAAM,CAACG,cAAc,CAACL,KAAK,EAAEC,QAAQ,CAAC;EAC5C;EAEOK,WAAWA,CAAA,EAAY;IAC7B,OAAO,IAAI,CAACC,WAAW;EACxB;EAEOC,YAAYA,CAACC,KAAuB,EAAQ;IAClD,IAAI,CAACd,IAAI,GAAGc,KAAK;EAClB;;EAEA;EACA,MAAcX,UAAUA,CAAA,EAAkB;IACzC,IAAI,IAAI,CAACY,OAAO,EAAE;MACjB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACvC,IAAI,CAACX,MAAM,CAACC,IAAI,CAACjB,iBAAiB,CAAC4B,IAAI,EAAE,MAAM;UAC9C,IAAI,CAACZ,MAAM,CAACC,IAAI,CAACjB,iBAAiB,CAAC6B,UAAU,EAAGC,KAAU,IAAK;YAC9DH,MAAM,CAACG,KAAK,CAAC;UACd,CAAC,CAAC;UACF,IAAI,OAAO,IAAI,CAACC,EAAE,KAAK,WAAW,EAAE;YACnC,OAAOJ,MAAM,CAAC,IAAIK,KAAK,CAAC,oBAAoB,CAAC,CAAC;UAC/C;UACAN,OAAO,CAAC,CAAC;QACV,CAAC,CAAC;MACH,CAAC,CAAC;IACH;IAEA,IAAI;MACH,IAAI,CAACF,OAAO,GAAG,IAAI;MACnB,MAAM,IAAI,CAACS,QAAQ,CAAC,CAAC;MACrB,MAAMC,SAAS,GAAG,MAAM,IAAI,CAACC,OAAO,CAAC,CAAC;MAEtC,IAAI,CAACnB,MAAM,CAACoB,IAAI,CAACpC,iBAAiB,CAAC4B,IAAI,CAAC;MAExC,IAAIM,SAAS,EAAE;QACd,IAAI,CAACb,WAAW,GAAG,IAAI;MACxB;IACD,CAAC,CAAC,OAAOgB,CAAC,EAAE;MACX,IAAI,CAACrB,MAAM,CAACoB,IAAI,CAACpC,iBAAiB,CAAC6B,UAAU,EAAEQ,CAAC,CAAC;MACjD,MAAMA,CAAC;IACR;EACD;EAEA,MAAcJ,QAAQA,CAAA,EAAoC;IACzD,IAAI,OAAO,IAAI,CAACF,EAAE,KAAK,WAAW,EAAE;MACnC,OAAO,IAAI,CAACA,EAAE;IACf;IAEA,IAAI,IAAI,CAACO,YAAY,EAAE;MACtB,OAAO,IAAIb,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACvC,IAAI,CAACX,MAAM,CAACC,IAAI,CAACjB,iBAAiB,CAACuC,cAAc,EAAGT,KAAU,IAAK;UAClEH,MAAM,CAACG,KAAK,CAAC;QACd,CAAC,CAAC;QACF,IAAI,CAACd,MAAM,CAACC,IAAI,CAACjB,iBAAiB,CAACO,IAAI,EAAE,MAAM;UAC9C,IAAI,OAAO,IAAI,CAACwB,EAAE,KAAK,WAAW,EAAE;YACnC,OAAOJ,MAAM,CAAC,IAAIK,KAAK,CAAC,oBAAoB,CAAC,CAAC;UAC/C;UACAN,OAAO,CAAC,IAAI,CAACK,EAAE,CAAC;QACjB,CAAC,CAAC;MACH,CAAC,CAAC;IACH;IACA,IAAI;MACH,IAAI,CAACO,YAAY,GAAG,IAAI;MAExB,IAAI,CAACP,EAAE,GAAG,IAAIhC,sBAAsB,CAAC;QACpCyC,GAAG,EAAEtC,eAAe;QACpBuC,SAAS,EAAE,IAAI,CAAChC;MACjB,CAAC,CAAC;MAEF,IAAI,CAAC6B,YAAY,GAAG,KAAK;MACzB,IAAI,CAACtB,MAAM,CAACoB,IAAI,CAACpC,iBAAiB,CAACO,IAAI,CAAC;MACxC,OAAO,IAAI,CAACwB,EAAE;IACf,CAAC,CAAC,OAAOM,CAAC,EAAE;MACX,IAAI,CAACrB,MAAM,CAACoB,IAAI,CAACpC,iBAAiB,CAACuC,cAAc,EAAEF,CAAC,CAAC;MACrD,MAAMA,CAAC;IACR;EACD;EAEA,MAAaF,OAAOA,CAAA,EAAqB;IACxC,OAAO,IAAIV,OAAO,CAAC,OAAOC,OAAO,EAAEC,MAAM,KAAK;MAC7C,IAAI;QACH,MAAMe,MAAM,GAAG,MAAM,IAAI,CAACX,EAAE,CAACY,SAAS,CAAC,IAAI,CAAC;QAE5CD,MAAM,CAAC7B,EAAE,CAAC,WAAW,EAAG+B,IAAS,IAAK;UACrCF,MAAM,CAACG,UAAU,CAAC,CAAC;UACnB,IAAI,CAAC7B,MAAM,CAACoB,IAAI,CAACpC,iBAAiB,CAAC8B,KAAK,EAAE,IAAIE,KAAK,CAACc,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAAC,CAAC;UAE1EjB,MAAM,CAAC,KAAK,CAAC;QACd,CAAC,CAAC;QAEFe,MAAM,CAAC7B,EAAE,CAAC,SAAS,EAAGwB,CAAM,IAAK;UAChC,IAAI,CAACrB,MAAM,CAACoB,IAAI,CAACpC,iBAAiB,CAACkC,SAAS,CAAC;UAE7CR,OAAO,CAAC,IAAI,CAAC;QACd,CAAC,CAAC;QAEFgB,MAAM,CAAC7B,EAAE,CAAC,eAAe,EAAE,MAAM;UAChC,IAAI,CAACG,MAAM,CAACoB,IAAI,CAACpC,iBAAiB,CAAC8B,KAAK,EAAE,IAAIE,KAAK,CAACc,IAAI,CAACC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAC;UACxFpB,MAAM,CAAC,KAAK,CAAC;QACd,CAAC,CAAC;QAEFe,MAAM,CAACP,OAAO,CAAC,CAAC;MACjB,CAAC,CAAC,OAAOL,KAAK,EAAE;QACfkB,OAAO,CAAClB,KAAK,CAACA,KAAK,CAAC;QACpB,MAAMA,KAAK;MACZ,CAAC,SAAS,CACV;IACD,CAAC,CAAC;EACH;EAEA,MAAae,UAAUA,CAAA,EAAkB;IACxC,OAAO,IAAIpB,OAAO,CAAC,OAAOC,OAAO,EAAEC,MAAM,KAAK;MAC7C,IAAI;QACH,MAAMe,MAAM,GAAG,MAAM,IAAI,CAACX,EAAE,CAACY,SAAS,CAAC,IAAI,CAAC;QAE5CD,MAAM,CAAC7B,EAAE,CAAC,WAAW,EAAG+B,IAAS,IAAK;UACrCF,MAAM,CAACG,UAAU,CAAC,CAAC;UACnB,IAAI,CAAC7B,MAAM,CAACoB,IAAI,CAACpC,iBAAiB,CAAC6B,UAAU,EAAE,IAAIG,KAAK,CAACc,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAAC,CAAC;UAE/EjB,MAAM,CAAC,IAAIK,KAAK,CAACc,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC;QAEFI,OAAO,CAACC,IAAI,CAAC,aAAa,CAAC;QAC3BP,MAAM,CAAC7B,EAAE,CAAC,SAAS,EAAE,MAAM;UAC1BmC,OAAO,CAACE,GAAG,CAAC,WAAW,CAAC;QACzB,CAAC,CAAC;QAEFR,MAAM,CAAC7B,EAAE,CAAC,eAAe,EAAE,MAAM;UAChCc,MAAM,CAAC,IAAIK,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACtC,CAAC,CAAC;QAEFU,MAAM,CAACG,UAAU,CAAC,CAAC;MACpB,CAAC,CAAC,OAAOf,KAAK,EAAE;QACfkB,OAAO,CAAClB,KAAK,CAACA,KAAK,CAAC;QACpB,MAAMA,KAAK;MACZ,CAAC,SAAS,CACV;IACD,CAAC,CAAC;EACH;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}