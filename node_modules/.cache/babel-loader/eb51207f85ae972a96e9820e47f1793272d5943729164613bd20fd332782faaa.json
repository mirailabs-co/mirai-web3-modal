{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { default as EventEmitter } from 'eventemitter3';\nexport class Connector extends EventEmitter {\n  constructor(_ref) {\n    let {\n      chains = [],\n      options\n    } = _ref;\n    super();\n    /** Unique connector id */\n    _defineProperty(this, \"id\", void 0);\n    /** Connector name */\n    _defineProperty(this, \"name\", void 0);\n    /** Chains connector supports */\n    _defineProperty(this, \"chains\", void 0);\n    /** Options to use with connector */\n    _defineProperty(this, \"options\", void 0);\n    /** Connector storage. */\n    _defineProperty(this, \"storage\", void 0);\n    /** Whether connector is usable */\n    _defineProperty(this, \"ready\", void 0);\n    _defineProperty(this, \"start\", void 0);\n    this.chains = chains;\n    this.options = options;\n  }\n  // protected getBlockExplorerUrls(chain: Chain) {\n  // \tconst { default: blockExplorer, ...blockExplorers } = chain.blockExplorers ?? {};\n  // \tif (blockExplorer) return [blockExplorer.url, ...Object.values(blockExplorers).map((x) => x.url)];\n  // }\n  isChainUnsupported(chainId) {\n    return !this.chains.some(x => x.id === chainId);\n  }\n  setStorage(storage) {\n    this.storage = storage;\n  }\n}","map":{"version":3,"names":["default","EventEmitter","Connector","constructor","_ref","chains","options","_defineProperty","isChainUnsupported","chainId","some","x","id","setStorage","storage"],"sources":["/Users/phuocnd/phuocnd/works/mirai/miraiidjs/src/sign-provider/connectors/connector.ts"],"sourcesContent":["import { IWalletClient } from '../../sign-provider/clients/wallet-client';\nimport { default as EventEmitter } from 'eventemitter3';\nimport { Chain } from '../../constants/chains';\n\nexport type Address = `0x${string}`;\n\nexport type ConnectorData = {\n\taccount?: string;\n\tchain?: { id: number; unsupported: boolean };\n};\n\nexport type ConnectorEvents = 'change' | 'connect' | 'message' | 'disconnect' | 'error';\n\nexport abstract class Connector<Provider = any, Options = any> extends EventEmitter<ConnectorEvents> {\n\t/** Unique connector id */\n\tabstract readonly id: string;\n\t/** Connector name */\n\tabstract readonly name: string;\n\t/** Chains connector supports */\n\treadonly chains: Chain[];\n\t/** Options to use with connector */\n\treadonly options: Options;\n\t/** Connector storage. */\n\tprotected storage?: Storage;\n\t/** Whether connector is usable */\n\tabstract readonly ready: boolean;\n\n\tconstructor({ chains = [], options }: { chains?: Chain[]; options: Options }) {\n\t\tsuper();\n\t\tthis.chains = chains;\n\t\tthis.options = options;\n\t}\n\tstart: () => void;\n\n\tabstract connect(config?: { chainId?: number }): Promise<Required<ConnectorData>>;\n\tabstract disconnect(): Promise<void>;\n\tabstract getAccount(): Promise<string>;\n\tabstract getChainId(): Promise<number>;\n\tabstract getProvider(config?: { chainId?: number }): Promise<Provider>;\n\tabstract isAuthorized(): Promise<boolean>;\n\tswitchChain?(chainId: number): Promise<number>;\n\twatchAsset?(asset: { address: string; decimals?: number; image?: string; symbol: string }): Promise<boolean>;\n\tabstract getWalletClient({ chainId }: { chainId?: number }): Promise<IWalletClient>;\n\n\tprotected abstract onAccountsChanged(accounts: string[]): void;\n\tprotected abstract onChainChanged(chain: number | string): void;\n\tprotected abstract onDisconnect(error: Error): void;\n\n\t// protected getBlockExplorerUrls(chain: Chain) {\n\t// \tconst { default: blockExplorer, ...blockExplorers } = chain.blockExplorers ?? {};\n\t// \tif (blockExplorer) return [blockExplorer.url, ...Object.values(blockExplorers).map((x) => x.url)];\n\t// }\n\n\tprotected isChainUnsupported(chainId: number) {\n\t\treturn !this.chains.some((x) => x.id === chainId);\n\t}\n\n\tsetStorage(storage: Storage) {\n\t\tthis.storage = storage;\n\t}\n}\n"],"mappings":";AACA,SAASA,OAAO,IAAIC,YAAY,QAAQ,eAAe;AAYvD,OAAO,MAAeC,SAAS,SAAwCD,YAAY,CAAkB;EAcpGE,WAAWA,CAAAC,IAAA,EAAmE;IAAA,IAAlE;MAAEC,MAAM,GAAG,EAAE;MAAEC;IAAgD,CAAC,GAAAF,IAAA;IAC3E,KAAK,CAAC,CAAC;IAdR;IAAAG,eAAA;IAEA;IAAAA,eAAA;IAEA;IAAAA,eAAA;IAEA;IAAAA,eAAA;IAEA;IAAAA,eAAA;IAEA;IAAAA,eAAA;IAAAA,eAAA;IAKC,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,OAAO,GAAGA,OAAO;EACvB;EAiBA;EACA;EACA;EACA;EAEUE,kBAAkBA,CAACC,OAAe,EAAE;IAC7C,OAAO,CAAC,IAAI,CAACJ,MAAM,CAACK,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKH,OAAO,CAAC;EAClD;EAEAI,UAAUA,CAACC,OAAgB,EAAE;IAC5B,IAAI,CAACA,OAAO,GAAGA,OAAO;EACvB;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}