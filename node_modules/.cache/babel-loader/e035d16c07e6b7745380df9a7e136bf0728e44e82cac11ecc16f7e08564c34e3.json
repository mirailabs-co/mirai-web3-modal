{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport axios from 'axios';\nimport { MiraiConnection } from '../connection/mirai-connection';\nimport { Core } from './core';\nconst PAIRING_URL = 'http://localhost:3000/get-pairing';\nexport class MiraiCore extends Core {\n  constructor(opts) {\n    super(opts);\n    _defineProperty(this, \"chains\", void 0);\n    _defineProperty(this, \"namespace\", void 0);\n    _defineProperty(this, \"connection\", void 0);\n    _defineProperty(this, \"onOpenConnection\", void 0);\n    this.chains = opts.chains;\n    this.namespace = opts.chainNameSpace;\n    this.onOpenConnection = opts.onOpenConnection;\n  }\n  static init(opts) {\n    const core = new MiraiCore(opts);\n    core.initialize();\n    return core;\n  }\n  async connect(_ref) {\n    let {\n      accessToken\n    } = _ref;\n    await this.connection.connect({\n      accessToken\n    });\n    return this.connection;\n  }\n  async showConnectionModal(connection) {\n    const topicId = connection.topicId;\n    console.log('topicId', topicId);\n\n    // We're get pairing uri\n    const data = await axios.get(PAIRING_URL);\n    console.log('Get Pairing URI', data);\n    if (data) {\n      typeof this.onOpenConnection === 'function' && (await this.onOpenConnection(new URL(data.data, topicId).toString()));\n    }\n  }\n  disconect(connection) {\n    throw new Error('Method not implemented.');\n  }\n  disconectAll() {\n    throw new Error('Method not implemented.');\n  }\n\n  // PRIVATE\n  async initialize() {\n    try {\n      this.connection = await MiraiConnection.init();\n      this.connection.emit('chains', this.chains);\n      this.connection.emit('namespace', this.namespace);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}","map":{"version":3,"names":["axios","MiraiConnection","Core","PAIRING_URL","MiraiCore","constructor","opts","_defineProperty","chains","namespace","chainNameSpace","onOpenConnection","init","core","initialize","connect","_ref","accessToken","connection","showConnectionModal","topicId","console","log","data","get","URL","toString","disconect","Error","disconectAll","emit","e","error"],"sources":["/Users/phuocnd/phuocnd/works/mirai/miraiidjs/src/sign-provider/cores/mirai-core.ts"],"sourcesContent":["import axios from 'axios';\nimport { MiraiConnection } from '../connection/mirai-connection';\nimport { Core, ICore } from './core';\nimport { Connection } from '../connection/connection';\nimport { Chain } from '../../constants/chains';\n\nconst PAIRING_URL: string = 'http://localhost:3000/get-pairing';\n\nexport class MiraiCore extends Core {\n\tchains: Chain[];\n\tnamespace: string;\n\tconnection: MiraiConnection;\n\n\tonOpenConnection: (url: string) => Promise<void>;\n\n\tconstructor(opts?: ICore) {\n\t\tsuper(opts);\n\n\t\tthis.chains = opts.chains;\n\t\tthis.namespace = opts.chainNameSpace;\n\t\tthis.onOpenConnection = opts.onOpenConnection;\n\t}\n\n\tpublic static init(opts?: ICore) {\n\t\tconst core = new MiraiCore(opts);\n\t\tcore.initialize();\n\n\t\treturn core;\n\t}\n\n\tpublic async connect({ accessToken }: { accessToken: string }) {\n\t\tawait this.connection.connect({ accessToken });\n\n\t\treturn this.connection;\n\t}\n\n\tpublic async showConnectionModal(connection: MiraiConnection) {\n\t\tconst topicId = connection.topicId;\n\n\t\tconsole.log('topicId', topicId);\n\n\t\t// We're get pairing uri\n\t\tconst data = await axios.get(PAIRING_URL);\n\n\t\tconsole.log('Get Pairing URI', data);\n\n\t\tif (data) {\n\t\t\ttypeof this.onOpenConnection === 'function' &&\n\t\t\t\t(await this.onOpenConnection(new URL(data.data, topicId).toString()));\n\t\t}\n\t}\n\n\tpublic disconect(connection: Connection): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tpublic disconectAll(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\t// PRIVATE\n\tasync initialize() {\n\t\ttry {\n\t\t\tthis.connection = await MiraiConnection.init();\n\n\t\t\tthis.connection.emit('chains', this.chains);\n\t\t\tthis.connection.emit('namespace', this.namespace);\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t}\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,IAAI,QAAe,QAAQ;AAIpC,MAAMC,WAAmB,GAAG,mCAAmC;AAE/D,OAAO,MAAMC,SAAS,SAASF,IAAI,CAAC;EAOnCG,WAAWA,CAACC,IAAY,EAAE;IACzB,KAAK,CAACA,IAAI,CAAC;IAACC,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAEZ,IAAI,CAACC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACzB,IAAI,CAACC,SAAS,GAAGH,IAAI,CAACI,cAAc;IACpC,IAAI,CAACC,gBAAgB,GAAGL,IAAI,CAACK,gBAAgB;EAC9C;EAEA,OAAcC,IAAIA,CAACN,IAAY,EAAE;IAChC,MAAMO,IAAI,GAAG,IAAIT,SAAS,CAACE,IAAI,CAAC;IAChCO,IAAI,CAACC,UAAU,CAAC,CAAC;IAEjB,OAAOD,IAAI;EACZ;EAEA,MAAaE,OAAOA,CAAAC,IAAA,EAA2C;IAAA,IAA1C;MAAEC;IAAqC,CAAC,GAAAD,IAAA;IAC5D,MAAM,IAAI,CAACE,UAAU,CAACH,OAAO,CAAC;MAAEE;IAAY,CAAC,CAAC;IAE9C,OAAO,IAAI,CAACC,UAAU;EACvB;EAEA,MAAaC,mBAAmBA,CAACD,UAA2B,EAAE;IAC7D,MAAME,OAAO,GAAGF,UAAU,CAACE,OAAO;IAElCC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;;IAE/B;IACA,MAAMG,IAAI,GAAG,MAAMvB,KAAK,CAACwB,GAAG,CAACrB,WAAW,CAAC;IAEzCkB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEC,IAAI,CAAC;IAEpC,IAAIA,IAAI,EAAE;MACT,OAAO,IAAI,CAACZ,gBAAgB,KAAK,UAAU,KACzC,MAAM,IAAI,CAACA,gBAAgB,CAAC,IAAIc,GAAG,CAACF,IAAI,CAACA,IAAI,EAAEH,OAAO,CAAC,CAACM,QAAQ,CAAC,CAAC,CAAC,CAAC;IACvE;EACD;EAEOC,SAASA,CAACT,UAAsB,EAAiB;IACvD,MAAM,IAAIU,KAAK,CAAC,yBAAyB,CAAC;EAC3C;EAEOC,YAAYA,CAAA,EAAkB;IACpC,MAAM,IAAID,KAAK,CAAC,yBAAyB,CAAC;EAC3C;;EAEA;EACA,MAAMd,UAAUA,CAAA,EAAG;IAClB,IAAI;MACH,IAAI,CAACI,UAAU,GAAG,MAAMjB,eAAe,CAACW,IAAI,CAAC,CAAC;MAE9C,IAAI,CAACM,UAAU,CAACY,IAAI,CAAC,QAAQ,EAAE,IAAI,CAACtB,MAAM,CAAC;MAC3C,IAAI,CAACU,UAAU,CAACY,IAAI,CAAC,WAAW,EAAE,IAAI,CAACrB,SAAS,CAAC;IAClD,CAAC,CAAC,OAAOsB,CAAC,EAAE;MACXV,OAAO,CAACW,KAAK,CAACD,CAAC,CAAC;IACjB;EACD;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}