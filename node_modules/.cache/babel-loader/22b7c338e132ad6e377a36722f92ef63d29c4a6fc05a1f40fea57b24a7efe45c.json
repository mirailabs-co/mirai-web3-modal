{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport EventEmitter from 'eventemitter3';\nimport { SignerWebSocketService } from '../transports/websocket/ws-signer';\nimport { CONNECTION_EVENTS, Connection } from './connection';\n// export const MiraiRelayerUrl: string = 'wss://id-api-dev.mirailabs.co/mpc';\n\nclass MiraiConnection extends Connection {\n  constructor(opts) {\n    super(opts);\n    _defineProperty(this, \"events\", new EventEmitter());\n    _defineProperty(this, \"miraiRelayerUrl\", 'ws://localhost:3000');\n    _defineProperty(this, \"pending\", false);\n    _defineProperty(this, \"initializing\", false);\n    _defineProperty(this, \"initialized\", false);\n    // FOR WS CONNECTION\n    _defineProperty(this, \"auth\", void 0);\n    _defineProperty(this, \"ws\", void 0);\n    this.auth = opts.auth;\n  }\n  static async init(_ref) {\n    let {\n      auth\n    } = _ref;\n    const connection = new MiraiConnection({\n      auth\n    });\n    await connection.initialize();\n    return connection;\n  }\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n  isConnected() {\n    return this.initialized;\n  }\n  setAuthToken(token) {\n    this.auth = token;\n  }\n\n  // PRIVATE\n  async initialize() {\n    if (this.pending) {\n      return new Promise((resolve, reject) => {\n        this.events.once(CONNECTION_EVENTS.open, () => {\n          this.events.once(CONNECTION_EVENTS.open_error, error => {\n            reject(error);\n          });\n          if (typeof this.ws === 'undefined') {\n            return reject(new Error('WS not initialized'));\n          }\n          resolve();\n        });\n      });\n    }\n    try {\n      this.pending = true;\n      await this.register();\n      const connected = await this.connect();\n      this.events.emit(CONNECTION_EVENTS.open);\n      if (connected) {\n        this.initialized = true;\n      }\n    } catch (e) {\n      this.events.emit(CONNECTION_EVENTS.open_error, e);\n      throw e;\n    }\n  }\n  async register() {\n    if (typeof this.ws !== 'undefined') {\n      return this.ws;\n    }\n    if (this.initializing) {\n      return new Promise((resolve, reject) => {\n        this.events.once(CONNECTION_EVENTS.register_error, error => {\n          reject(error);\n        });\n        this.events.once(CONNECTION_EVENTS.init, () => {\n          if (typeof this.ws === 'undefined') {\n            return reject(new Error('WS not initialized'));\n          }\n          resolve(this.ws);\n        });\n      });\n    }\n    try {\n      this.initializing = true;\n      this.ws = new SignerWebSocketService({\n        url: this.miraiRelayerUrl,\n        authToken: this.auth\n      });\n      console.log('this.ws', this.ws);\n      this.initializing = false;\n      this.events.emit(CONNECTION_EVENTS.init);\n      return this.ws;\n    } catch (e) {\n      this.events.emit(CONNECTION_EVENTS.register_error, e);\n      throw e;\n    }\n  }\n  async connect() {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const socket = await this.ws.establish(true);\n        socket.on('exception', args => {\n          socket.disconnect();\n          this.events.emit(CONNECTION_EVENTS.error, new Error(JSON.stringify(args)));\n          reject(false);\n        });\n        socket.on('connect', e => {\n          this.events.emit(CONNECTION_EVENTS.connected);\n          resolve(true);\n        });\n        socket.on('connect_error', () => {\n          this.events.emit(CONNECTION_EVENTS.error, new Error(JSON.stringify('Connection error')));\n          reject(false);\n        });\n        socket.connect();\n      } catch (error) {\n        console.error(error);\n        throw error;\n      } finally {}\n    });\n  }\n  async disconnect() {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const socket = await this.ws.establish(true);\n        socket.on('exception', args => {\n          socket.disconnect();\n          this.events.emit(CONNECTION_EVENTS.open_error, new Error(JSON.stringify(args)));\n          reject(new Error(JSON.stringify(args)));\n        });\n        console.time('WS get-pail');\n        socket.on('connect', () => {\n          console.log('connected');\n        });\n        socket.on('connect_error', () => {\n          reject(new Error('Connection error'));\n        });\n        socket.disconnect();\n      } catch (error) {\n        console.error(error);\n        throw error;\n      } finally {}\n    });\n  }\n}\nexport { MiraiConnection };","map":{"version":3,"names":["EventEmitter","SignerWebSocketService","CONNECTION_EVENTS","Connection","MiraiConnection","constructor","opts","_defineProperty","auth","init","_ref","connection","initialize","on","event","listener","events","once","off","removeListener","isConnected","initialized","setAuthToken","token","pending","Promise","resolve","reject","open","open_error","error","ws","Error","register","connected","connect","emit","e","initializing","register_error","url","miraiRelayerUrl","authToken","console","log","socket","establish","args","disconnect","JSON","stringify","time"],"sources":["/Users/phuocnd/phuocnd/works/mirai/miraiidjs/src/sign-provider/connection/mirai-connection.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { SignerWebSocketService } from '../transports/websocket/ws-signer';\nimport { CONNECTION_EVENTS, Connection, ConnectionOpts, TConnectionEvent } from './connection';\nimport { auth } from '../../constants';\n\n// export const MiraiRelayerUrl: string = 'wss://id-api-dev.mirailabs.co/mpc';\n\nclass MiraiConnection extends Connection {\n\tpublic events: any = new EventEmitter();\n\n\tprivate readonly miraiRelayerUrl: string = 'ws://localhost:3000';\n\n\tprivate pending = false;\n\tprivate initializing = false;\n\tprivate initialized = false;\n\n\t// FOR WS CONNECTION\n\tpublic auth: auth.TMiraiToken;\n\tpublic ws: InstanceType<typeof SignerWebSocketService>;\n\n\tconstructor(opts: ConnectionOpts) {\n\t\tsuper(opts);\n\n\t\tthis.auth = opts.auth;\n\t}\n\n\tpublic static async init({ auth }: { auth: auth.TMiraiToken }) {\n\t\tconst connection = new MiraiConnection({ auth });\n\n\t\tawait connection.initialize();\n\n\t\treturn connection;\n\t}\n\n\tpublic on(event: TConnectionEvent, listener: any) {\n\t\tthis.events.on(event, listener);\n\t}\n\n\tpublic once(event: TConnectionEvent, listener: any) {\n\t\tthis.events.once(event, listener);\n\t}\n\n\tpublic off(event: TConnectionEvent, listener: any) {\n\t\tthis.events.off(event, listener);\n\t}\n\n\tpublic removeListener(event: TConnectionEvent, listener: any) {\n\t\tthis.events.removeListener(event, listener);\n\t}\n\n\tpublic isConnected(): boolean {\n\t\treturn this.initialized;\n\t}\n\n\tpublic setAuthToken(token: auth.TMiraiToken): void {\n\t\tthis.auth = token;\n\t}\n\n\t// PRIVATE\n\tprivate async initialize(): Promise<void> {\n\t\tif (this.pending) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.events.once(CONNECTION_EVENTS.open, () => {\n\t\t\t\t\tthis.events.once(CONNECTION_EVENTS.open_error, (error: any) => {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t});\n\t\t\t\t\tif (typeof this.ws === 'undefined') {\n\t\t\t\t\t\treturn reject(new Error('WS not initialized'));\n\t\t\t\t\t}\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\ttry {\n\t\t\tthis.pending = true;\n\t\t\tawait this.register();\n\t\t\tconst connected = await this.connect();\n\n\t\t\tthis.events.emit(CONNECTION_EVENTS.open);\n\n\t\t\tif (connected) {\n\t\t\t\tthis.initialized = true;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.events.emit(CONNECTION_EVENTS.open_error, e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprivate async register(): Promise<SignerWebSocketService> {\n\t\tif (typeof this.ws !== 'undefined') {\n\t\t\treturn this.ws;\n\t\t}\n\n\t\tif (this.initializing) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.events.once(CONNECTION_EVENTS.register_error, (error: any) => {\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t\t\tthis.events.once(CONNECTION_EVENTS.init, () => {\n\t\t\t\t\tif (typeof this.ws === 'undefined') {\n\t\t\t\t\t\treturn reject(new Error('WS not initialized'));\n\t\t\t\t\t}\n\t\t\t\t\tresolve(this.ws);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\ttry {\n\t\t\tthis.initializing = true;\n\n\t\t\tthis.ws = new SignerWebSocketService({\n\t\t\t\turl: this.miraiRelayerUrl,\n\t\t\t\tauthToken: this.auth,\n\t\t\t});\n\n\t\t\tconsole.log('this.ws', this.ws);\n\n\t\t\tthis.initializing = false;\n\t\t\tthis.events.emit(CONNECTION_EVENTS.init);\n\t\t\treturn this.ws;\n\t\t} catch (e) {\n\t\t\tthis.events.emit(CONNECTION_EVENTS.register_error, e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tpublic async connect(): Promise<boolean> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst socket = await this.ws.establish(true);\n\n\t\t\t\tsocket.on('exception', (args: any) => {\n\t\t\t\t\tsocket.disconnect();\n\t\t\t\t\tthis.events.emit(CONNECTION_EVENTS.error, new Error(JSON.stringify(args)));\n\n\t\t\t\t\treject(false);\n\t\t\t\t});\n\n\t\t\t\tsocket.on('connect', (e: any) => {\n\t\t\t\t\tthis.events.emit(CONNECTION_EVENTS.connected);\n\n\t\t\t\t\tresolve(true);\n\t\t\t\t});\n\n\t\t\t\tsocket.on('connect_error', () => {\n\t\t\t\t\tthis.events.emit(CONNECTION_EVENTS.error, new Error(JSON.stringify('Connection error')));\n\t\t\t\t\treject(false);\n\t\t\t\t});\n\n\t\t\t\tsocket.connect();\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tthrow error;\n\t\t\t} finally {\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async disconnect(): Promise<void> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst socket = await this.ws.establish(true);\n\n\t\t\t\tsocket.on('exception', (args: any) => {\n\t\t\t\t\tsocket.disconnect();\n\t\t\t\t\tthis.events.emit(CONNECTION_EVENTS.open_error, new Error(JSON.stringify(args)));\n\n\t\t\t\t\treject(new Error(JSON.stringify(args)));\n\t\t\t\t});\n\n\t\t\t\tconsole.time('WS get-pail');\n\t\t\t\tsocket.on('connect', () => {\n\t\t\t\t\tconsole.log('connected');\n\t\t\t\t});\n\n\t\t\t\tsocket.on('connect_error', () => {\n\t\t\t\t\treject(new Error('Connection error'));\n\t\t\t\t});\n\n\t\t\t\tsocket.disconnect();\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tthrow error;\n\t\t\t} finally {\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport { MiraiConnection };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}