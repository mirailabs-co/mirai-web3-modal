{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { SignerWebSocketService } from '../transports/websocket/ws-signer';\nimport { Connection } from './connection';\nimport { v4 as uuidv4 } from 'uuid';\n// export const MiraiRelayerUrl: string = 'wss://id-api-dev.mirailabs.co/mpc';\n\nclass MiraiConnection extends Connection {\n  constructor(opts) {\n    super(opts);\n    _defineProperty(this, \"topicId\", void 0);\n    // FOR PROVIDER\n    _defineProperty(this, \"chains\", void 0);\n    _defineProperty(this, \"namespace\", void 0);\n    _defineProperty(this, \"miraiRelayerUrl\", 'ws://localhost:3000');\n    _defineProperty(this, \"pending\", false);\n    _defineProperty(this, \"initializing\", false);\n    _defineProperty(this, \"initialized\", false);\n    // FOR WS CONNECTION\n    _defineProperty(this, \"accessToken\", void 0);\n    _defineProperty(this, \"ws\", void 0);\n    this.accessToken = opts.accessToken || null;\n  }\n  static async init() {\n    let {\n      accessToken\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const connection = new MiraiConnection({\n      accessToken\n    });\n    await connection.initialize();\n    return connection;\n  }\n\n  // public on(event: TConnectionEvent, listener: any) {\n  // \tthis.events.on(event, listener);\n  // }\n\n  // public once(event: TConnectionEvent, listener: any) {\n  // \tthis.events.once(event, listener);\n  // }\n\n  // public off(event: TConnectionEvent, listener: any) {\n  // \tthis.events.off(event, listener);\n  // }\n\n  // public removeListener(event: TConnectionEvent, listener: any) {\n  // \tthis.events.removeListener(event, listener);\n  // }\n\n  isConnected() {\n    return this.initialized;\n  }\n\n  // PRIVATE\n  async initialize() {\n    if (this.pending) {\n      return new Promise((resolve, reject) => {\n        this.once('open', () => {\n          this.once('open_error', error => {\n            reject(error);\n          });\n          if (typeof this.ws === 'undefined') {\n            return reject(new Error('WS not initialized'));\n          }\n          resolve();\n        });\n      });\n    }\n    try {\n      this.pending = true;\n      await this._registerListener();\n      if (this.accessToken) {\n        await this.register(this.accessToken);\n      }\n      this.emit('open');\n    } catch (e) {\n      this.emit('open_error', e);\n      throw e;\n    }\n  }\n  async register(accessToken) {\n    if (typeof this.ws !== 'undefined') {\n      return this.ws;\n    }\n    if (this.initializing) {\n      return new Promise((resolve, reject) => {\n        this.once('register_error', error => {\n          reject(error);\n        });\n        this.once('init', () => {\n          if (typeof this.ws === 'undefined') {\n            return reject(new Error('WS not initialized'));\n          }\n          resolve(this.ws);\n        });\n      });\n    }\n    try {\n      this.initializing = true;\n      this.ws = new SignerWebSocketService({\n        url: this.miraiRelayerUrl,\n        accessToken\n      });\n      console.log('this.ws', this.ws);\n      this.initializing = false;\n      this.emit('init');\n      return this.ws;\n    } catch (e) {\n      this.emit('register_error', e);\n      throw e;\n    }\n  }\n  async connect(_ref) {\n    let {\n      accessToken\n    } = _ref;\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (!this.ws || this.ws === undefined) {\n          console.log('Register new connection with', accessToken);\n          await this.register(accessToken);\n        }\n        const socket = await this.ws.establish(true);\n        socket.on('exception', args => {\n          socket.disconnect();\n          this.emit('error', new Error(JSON.stringify(args)));\n          reject(false);\n        });\n        socket.on('connect', e => {\n          const topicId = uuidv4();\n          this.emit('connected', topicId);\n          this.initialized = true;\n          socket.getSocket().on(topicId, resp => {\n            if (resp.code === 0) {\n              this.emit('rejected', new Error(JSON.stringify(resp.data)));\n              throw new Error(JSON.stringify(resp.data));\n            }\n            const {\n              namespaces\n            } = resp.data;\n            this.emit('approved', _objectSpread(_objectSpread({}, resp.data), {}, {\n              topicId: topicId\n            }));\n            resolve(resp.data);\n          });\n          resolve(true);\n        });\n        socket.on('connect_error', () => {\n          this.emit('error', new Error(JSON.stringify('Connection error')));\n          reject(false);\n        });\n        socket.connect();\n      } catch (error) {\n        console.error(error);\n        throw error;\n      } finally {}\n    });\n  }\n  async disconnect() {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const socket = await this.ws.establish(true);\n        socket.on('exception', args => {\n          socket.disconnect();\n          this.emit('open_error', new Error(JSON.stringify(args)));\n          reject(new Error(JSON.stringify(args)));\n        });\n        console.time('WS get-pail');\n        socket.on('connect', () => {\n          console.log('connected');\n        });\n        socket.on('connect_error', () => {\n          reject(new Error('Connection error'));\n        });\n        socket.disconnect();\n      } catch (error) {\n        console.error(error);\n        throw error;\n      } finally {}\n    });\n  }\n  async _registerListener() {\n    this.once('connected', topic => {\n      console.log('topic', topic);\n      this.topicId = topic;\n    });\n    this.once('namespace', np => {\n      this.namespace = np;\n      console.log('namespace', np);\n    });\n    this.once('chains', chains => {\n      console.log('chains', chains);\n      this.chains = chains;\n    });\n  }\n}\nexport { MiraiConnection };","map":{"version":3,"names":["SignerWebSocketService","Connection","v4","uuidv4","MiraiConnection","constructor","opts","_defineProperty","accessToken","init","arguments","length","undefined","connection","initialize","isConnected","initialized","pending","Promise","resolve","reject","once","error","ws","Error","_registerListener","register","emit","e","initializing","url","miraiRelayerUrl","console","log","connect","_ref","socket","establish","on","args","disconnect","JSON","stringify","topicId","getSocket","resp","code","data","namespaces","_objectSpread","time","topic","np","namespace","chains"],"sources":["/Users/phuocnd/phuocnd/works/mirai/miraiidjs/src/sign-provider/connection/mirai-connection.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { SignerWebSocketService } from '../transports/websocket/ws-signer';\nimport { CONNECTION_EVENTS, ConfigEvents, Connection, ConnectionOpts } from './connection';\nimport { v4 as uuidv4 } from 'uuid';\nimport { TConnectionEvent } from './types';\nimport { Chain } from 'src/constants/chains';\nimport { WalletConnectSession } from '../providers/mirai-provider';\n\n// export const MiraiRelayerUrl: string = 'wss://id-api-dev.mirailabs.co/mpc';\n\nclass MiraiConnection extends Connection {\n\tpublic topicId: string;\n\n\t// FOR PROVIDER\n\tpublic chains: Chain[];\n\tpublic namespace: string;\n\n\tprivate readonly miraiRelayerUrl: string = 'ws://localhost:3000';\n\n\tprivate pending = false;\n\tprivate initializing = false;\n\tprivate initialized = false;\n\n\t// FOR WS CONNECTION\n\tpublic accessToken: string;\n\tpublic ws: InstanceType<typeof SignerWebSocketService>;\n\n\tconstructor(opts: ConnectionOpts) {\n\t\tsuper(opts);\n\n\t\tthis.accessToken = opts.accessToken || null;\n\t}\n\n\tpublic static async init({ accessToken }: { accessToken?: string } = {}) {\n\t\tconst connection = new MiraiConnection({ accessToken });\n\n\t\tawait connection.initialize();\n\n\t\treturn connection;\n\t}\n\n\t// public on(event: TConnectionEvent, listener: any) {\n\t// \tthis.events.on(event, listener);\n\t// }\n\n\t// public once(event: TConnectionEvent, listener: any) {\n\t// \tthis.events.once(event, listener);\n\t// }\n\n\t// public off(event: TConnectionEvent, listener: any) {\n\t// \tthis.events.off(event, listener);\n\t// }\n\n\t// public removeListener(event: TConnectionEvent, listener: any) {\n\t// \tthis.events.removeListener(event, listener);\n\t// }\n\n\tpublic isConnected(): boolean {\n\t\treturn this.initialized;\n\t}\n\n\t// PRIVATE\n\tprivate async initialize(): Promise<void> {\n\t\tif (this.pending) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.once('open', () => {\n\t\t\t\t\tthis.once('open_error', (error: any) => {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t});\n\t\t\t\t\tif (typeof this.ws === 'undefined') {\n\t\t\t\t\t\treturn reject(new Error('WS not initialized'));\n\t\t\t\t\t}\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\ttry {\n\t\t\tthis.pending = true;\n\t\t\tawait this._registerListener();\n\n\t\t\tif (this.accessToken) {\n\t\t\t\tawait this.register(this.accessToken);\n\t\t\t}\n\n\t\t\tthis.emit('open');\n\t\t} catch (e) {\n\t\t\tthis.emit('open_error', e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprivate async register(accessToken: string): Promise<SignerWebSocketService> {\n\t\tif (typeof this.ws !== 'undefined') {\n\t\t\treturn this.ws;\n\t\t}\n\n\t\tif (this.initializing) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.once('register_error', (error: any) => {\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t\t\tthis.once('init', () => {\n\t\t\t\t\tif (typeof this.ws === 'undefined') {\n\t\t\t\t\t\treturn reject(new Error('WS not initialized'));\n\t\t\t\t\t}\n\t\t\t\t\tresolve(this.ws);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\ttry {\n\t\t\tthis.initializing = true;\n\n\t\t\tthis.ws = new SignerWebSocketService({\n\t\t\t\turl: this.miraiRelayerUrl,\n\t\t\t\taccessToken,\n\t\t\t});\n\n\t\t\tconsole.log('this.ws', this.ws);\n\n\t\t\tthis.initializing = false;\n\t\t\tthis.emit('init');\n\t\t\treturn this.ws;\n\t\t} catch (e) {\n\t\t\tthis.emit('register_error', e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tpublic async connect({ accessToken }: { accessToken: string }): Promise<boolean> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tif (!this.ws || this.ws === undefined) {\n\t\t\t\t\tconsole.log('Register new connection with', accessToken);\n\t\t\t\t\tawait this.register(accessToken);\n\t\t\t\t}\n\t\t\t\tconst socket = await this.ws.establish(true);\n\n\t\t\t\tsocket.on('exception', (args: any) => {\n\t\t\t\t\tsocket.disconnect();\n\t\t\t\t\tthis.emit('error', new Error(JSON.stringify(args)));\n\n\t\t\t\t\treject(false);\n\t\t\t\t});\n\n\t\t\t\tsocket.on('connect', (e: any) => {\n\t\t\t\t\tconst topicId = uuidv4();\n\t\t\t\t\tthis.emit('connected', topicId);\n\n\t\t\t\t\tthis.initialized = true;\n\n\t\t\t\t\tsocket.getSocket().on(topicId, (resp: any) => {\n\t\t\t\t\t\tif (resp.code === 0) {\n\t\t\t\t\t\t\tthis.emit('rejected', new Error(JSON.stringify(resp.data)));\n\t\t\t\t\t\t\tthrow new Error(JSON.stringify(resp.data));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst { namespaces } = resp.data as WalletConnectSession;\n\n\t\t\t\t\t\tthis.emit('approved', {\n\t\t\t\t\t\t\t...(resp.data as WalletConnectSession),\n\t\t\t\t\t\t\ttopicId: topicId,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tresolve(resp.data);\n\t\t\t\t\t});\n\n\t\t\t\t\tresolve(true);\n\t\t\t\t});\n\n\t\t\t\tsocket.on('connect_error', () => {\n\t\t\t\t\tthis.emit('error', new Error(JSON.stringify('Connection error')));\n\t\t\t\t\treject(false);\n\t\t\t\t});\n\n\t\t\t\tsocket.connect();\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tthrow error;\n\t\t\t} finally {\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async disconnect(): Promise<void> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst socket = await this.ws.establish(true);\n\n\t\t\t\tsocket.on('exception', (args: any) => {\n\t\t\t\t\tsocket.disconnect();\n\t\t\t\t\tthis.emit('open_error', new Error(JSON.stringify(args)));\n\n\t\t\t\t\treject(new Error(JSON.stringify(args)));\n\t\t\t\t});\n\n\t\t\t\tconsole.time('WS get-pail');\n\t\t\t\tsocket.on('connect', () => {\n\t\t\t\t\tconsole.log('connected');\n\t\t\t\t});\n\n\t\t\t\tsocket.on('connect_error', () => {\n\t\t\t\t\treject(new Error('Connection error'));\n\t\t\t\t});\n\n\t\t\t\tsocket.disconnect();\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tthrow error;\n\t\t\t} finally {\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _registerListener() {\n\t\tthis.once('connected', (topic: string) => {\n\t\t\tconsole.log('topic', topic);\n\t\t\tthis.topicId = topic;\n\t\t});\n\n\t\tthis.once('namespace', (np: string) => {\n\t\t\tthis.namespace = np;\n\n\t\t\tconsole.log('namespace', np);\n\t\t});\n\t\tthis.once('chains', (chains: Chain[]) => {\n\t\t\tconsole.log('chains', chains);\n\t\t\tthis.chains = chains;\n\t\t});\n\t}\n}\n\nexport { MiraiConnection };\n"],"mappings":";;;AACA,SAASA,sBAAsB,QAAQ,mCAAmC;AAC1E,SAA0CC,UAAU,QAAwB,cAAc;AAC1F,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAKnC;;AAEA,MAAMC,eAAe,SAASH,UAAU,CAAC;EAiBxCI,WAAWA,CAACC,IAAoB,EAAE;IACjC,KAAK,CAACA,IAAI,CAAC;IAACC,eAAA;IAfb;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA,0BAI2C,qBAAqB;IAAAA,eAAA,kBAE9C,KAAK;IAAAA,eAAA,uBACA,KAAK;IAAAA,eAAA,sBACN,KAAK;IAE3B;IAAAA,eAAA;IAAAA,eAAA;IAOC,IAAI,CAACC,WAAW,GAAGF,IAAI,CAACE,WAAW,IAAI,IAAI;EAC5C;EAEA,aAAoBC,IAAIA,CAAA,EAAiD;IAAA,IAAhD;MAAED;IAAsC,CAAC,GAAAE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACtE,MAAMG,UAAU,GAAG,IAAIT,eAAe,CAAC;MAAEI;IAAY,CAAC,CAAC;IAEvD,MAAMK,UAAU,CAACC,UAAU,CAAC,CAAC;IAE7B,OAAOD,UAAU;EAClB;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEOE,WAAWA,CAAA,EAAY;IAC7B,OAAO,IAAI,CAACC,WAAW;EACxB;;EAEA;EACA,MAAcF,UAAUA,CAAA,EAAkB;IACzC,IAAI,IAAI,CAACG,OAAO,EAAE;MACjB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACvC,IAAI,CAACC,IAAI,CAAC,MAAM,EAAE,MAAM;UACvB,IAAI,CAACA,IAAI,CAAC,YAAY,EAAGC,KAAU,IAAK;YACvCF,MAAM,CAACE,KAAK,CAAC;UACd,CAAC,CAAC;UACF,IAAI,OAAO,IAAI,CAACC,EAAE,KAAK,WAAW,EAAE;YACnC,OAAOH,MAAM,CAAC,IAAII,KAAK,CAAC,oBAAoB,CAAC,CAAC;UAC/C;UACAL,OAAO,CAAC,CAAC;QACV,CAAC,CAAC;MACH,CAAC,CAAC;IACH;IAEA,IAAI;MACH,IAAI,CAACF,OAAO,GAAG,IAAI;MACnB,MAAM,IAAI,CAACQ,iBAAiB,CAAC,CAAC;MAE9B,IAAI,IAAI,CAACjB,WAAW,EAAE;QACrB,MAAM,IAAI,CAACkB,QAAQ,CAAC,IAAI,CAAClB,WAAW,CAAC;MACtC;MAEA,IAAI,CAACmB,IAAI,CAAC,MAAM,CAAC;IAClB,CAAC,CAAC,OAAOC,CAAC,EAAE;MACX,IAAI,CAACD,IAAI,CAAC,YAAY,EAAEC,CAAC,CAAC;MAC1B,MAAMA,CAAC;IACR;EACD;EAEA,MAAcF,QAAQA,CAAClB,WAAmB,EAAmC;IAC5E,IAAI,OAAO,IAAI,CAACe,EAAE,KAAK,WAAW,EAAE;MACnC,OAAO,IAAI,CAACA,EAAE;IACf;IAEA,IAAI,IAAI,CAACM,YAAY,EAAE;MACtB,OAAO,IAAIX,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACvC,IAAI,CAACC,IAAI,CAAC,gBAAgB,EAAGC,KAAU,IAAK;UAC3CF,MAAM,CAACE,KAAK,CAAC;QACd,CAAC,CAAC;QACF,IAAI,CAACD,IAAI,CAAC,MAAM,EAAE,MAAM;UACvB,IAAI,OAAO,IAAI,CAACE,EAAE,KAAK,WAAW,EAAE;YACnC,OAAOH,MAAM,CAAC,IAAII,KAAK,CAAC,oBAAoB,CAAC,CAAC;UAC/C;UACAL,OAAO,CAAC,IAAI,CAACI,EAAE,CAAC;QACjB,CAAC,CAAC;MACH,CAAC,CAAC;IACH;IACA,IAAI;MACH,IAAI,CAACM,YAAY,GAAG,IAAI;MAExB,IAAI,CAACN,EAAE,GAAG,IAAIvB,sBAAsB,CAAC;QACpC8B,GAAG,EAAE,IAAI,CAACC,eAAe;QACzBvB;MACD,CAAC,CAAC;MAEFwB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE,IAAI,CAACV,EAAE,CAAC;MAE/B,IAAI,CAACM,YAAY,GAAG,KAAK;MACzB,IAAI,CAACF,IAAI,CAAC,MAAM,CAAC;MACjB,OAAO,IAAI,CAACJ,EAAE;IACf,CAAC,CAAC,OAAOK,CAAC,EAAE;MACX,IAAI,CAACD,IAAI,CAAC,gBAAgB,EAAEC,CAAC,CAAC;MAC9B,MAAMA,CAAC;IACR;EACD;EAEA,MAAaM,OAAOA,CAAAC,IAAA,EAA6D;IAAA,IAA5D;MAAE3B;IAAqC,CAAC,GAAA2B,IAAA;IAC5D,OAAO,IAAIjB,OAAO,CAAC,OAAOC,OAAO,EAAEC,MAAM,KAAK;MAC7C,IAAI;QACH,IAAI,CAAC,IAAI,CAACG,EAAE,IAAI,IAAI,CAACA,EAAE,KAAKX,SAAS,EAAE;UACtCoB,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEzB,WAAW,CAAC;UACxD,MAAM,IAAI,CAACkB,QAAQ,CAAClB,WAAW,CAAC;QACjC;QACA,MAAM4B,MAAM,GAAG,MAAM,IAAI,CAACb,EAAE,CAACc,SAAS,CAAC,IAAI,CAAC;QAE5CD,MAAM,CAACE,EAAE,CAAC,WAAW,EAAGC,IAAS,IAAK;UACrCH,MAAM,CAACI,UAAU,CAAC,CAAC;UACnB,IAAI,CAACb,IAAI,CAAC,OAAO,EAAE,IAAIH,KAAK,CAACiB,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAAC,CAAC;UAEnDnB,MAAM,CAAC,KAAK,CAAC;QACd,CAAC,CAAC;QAEFgB,MAAM,CAACE,EAAE,CAAC,SAAS,EAAGV,CAAM,IAAK;UAChC,MAAMe,OAAO,GAAGxC,MAAM,CAAC,CAAC;UACxB,IAAI,CAACwB,IAAI,CAAC,WAAW,EAAEgB,OAAO,CAAC;UAE/B,IAAI,CAAC3B,WAAW,GAAG,IAAI;UAEvBoB,MAAM,CAACQ,SAAS,CAAC,CAAC,CAACN,EAAE,CAACK,OAAO,EAAGE,IAAS,IAAK;YAC7C,IAAIA,IAAI,CAACC,IAAI,KAAK,CAAC,EAAE;cACpB,IAAI,CAACnB,IAAI,CAAC,UAAU,EAAE,IAAIH,KAAK,CAACiB,IAAI,CAACC,SAAS,CAACG,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC;cAC3D,MAAM,IAAIvB,KAAK,CAACiB,IAAI,CAACC,SAAS,CAACG,IAAI,CAACE,IAAI,CAAC,CAAC;YAC3C;YAEA,MAAM;cAAEC;YAAW,CAAC,GAAGH,IAAI,CAACE,IAA4B;YAExD,IAAI,CAACpB,IAAI,CAAC,UAAU,EAAAsB,aAAA,CAAAA,aAAA,KACfJ,IAAI,CAACE,IAAI;cACbJ,OAAO,EAAEA;YAAO,EAChB,CAAC;YAEFxB,OAAO,CAAC0B,IAAI,CAACE,IAAI,CAAC;UACnB,CAAC,CAAC;UAEF5B,OAAO,CAAC,IAAI,CAAC;QACd,CAAC,CAAC;QAEFiB,MAAM,CAACE,EAAE,CAAC,eAAe,EAAE,MAAM;UAChC,IAAI,CAACX,IAAI,CAAC,OAAO,EAAE,IAAIH,KAAK,CAACiB,IAAI,CAACC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAC;UACjEtB,MAAM,CAAC,KAAK,CAAC;QACd,CAAC,CAAC;QAEFgB,MAAM,CAACF,OAAO,CAAC,CAAC;MACjB,CAAC,CAAC,OAAOZ,KAAK,EAAE;QACfU,OAAO,CAACV,KAAK,CAACA,KAAK,CAAC;QACpB,MAAMA,KAAK;MACZ,CAAC,SAAS,CACV;IACD,CAAC,CAAC;EACH;EAEA,MAAakB,UAAUA,CAAA,EAAkB;IACxC,OAAO,IAAItB,OAAO,CAAC,OAAOC,OAAO,EAAEC,MAAM,KAAK;MAC7C,IAAI;QACH,MAAMgB,MAAM,GAAG,MAAM,IAAI,CAACb,EAAE,CAACc,SAAS,CAAC,IAAI,CAAC;QAE5CD,MAAM,CAACE,EAAE,CAAC,WAAW,EAAGC,IAAS,IAAK;UACrCH,MAAM,CAACI,UAAU,CAAC,CAAC;UACnB,IAAI,CAACb,IAAI,CAAC,YAAY,EAAE,IAAIH,KAAK,CAACiB,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAAC,CAAC;UAExDnB,MAAM,CAAC,IAAII,KAAK,CAACiB,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC;QAEFP,OAAO,CAACkB,IAAI,CAAC,aAAa,CAAC;QAC3Bd,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,MAAM;UAC1BN,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;QACzB,CAAC,CAAC;QAEFG,MAAM,CAACE,EAAE,CAAC,eAAe,EAAE,MAAM;UAChClB,MAAM,CAAC,IAAII,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACtC,CAAC,CAAC;QAEFY,MAAM,CAACI,UAAU,CAAC,CAAC;MACpB,CAAC,CAAC,OAAOlB,KAAK,EAAE;QACfU,OAAO,CAACV,KAAK,CAACA,KAAK,CAAC;QACpB,MAAMA,KAAK;MACZ,CAAC,SAAS,CACV;IACD,CAAC,CAAC;EACH;EAEA,MAAcG,iBAAiBA,CAAA,EAAG;IACjC,IAAI,CAACJ,IAAI,CAAC,WAAW,EAAG8B,KAAa,IAAK;MACzCnB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEkB,KAAK,CAAC;MAC3B,IAAI,CAACR,OAAO,GAAGQ,KAAK;IACrB,CAAC,CAAC;IAEF,IAAI,CAAC9B,IAAI,CAAC,WAAW,EAAG+B,EAAU,IAAK;MACtC,IAAI,CAACC,SAAS,GAAGD,EAAE;MAEnBpB,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEmB,EAAE,CAAC;IAC7B,CAAC,CAAC;IACF,IAAI,CAAC/B,IAAI,CAAC,QAAQ,EAAGiC,MAAe,IAAK;MACxCtB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEqB,MAAM,CAAC;MAC7B,IAAI,CAACA,MAAM,GAAGA,MAAM;IACrB,CAAC,CAAC;EACH;AACD;AAEA,SAASlD,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}