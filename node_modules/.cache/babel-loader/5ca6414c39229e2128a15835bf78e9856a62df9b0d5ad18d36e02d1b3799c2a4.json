{"ast":null,"code":"export function createWalletClient(_ref) {\n  let {\n    account,\n    chainId,\n    provider\n  } = _ref;\n  return {\n    account,\n    chainId,\n    request: async args => {\n      try {\n        return await provider.request(args);\n      } catch (e) {\n        // CATCH EXCEPTION HERE\n\n        console.log('exception', JSON.parse(e.message));\n        throw new Error(JSON.parse(e.message).message);\n      }\n    }\n  };\n}","map":{"version":3,"names":["createWalletClient","_ref","account","chainId","provider","request","args","e","console","log","JSON","parse","message","Error"],"sources":["/Users/phuocnd/phuocnd/works/mirai/miraiidjs/src/sign-provider/clients/wallet-client.ts"],"sourcesContent":["export type TWalletClient = {\n\taccount: string;\n\tchainId: number;\n\tprovider: EthereumProvider;\n};\n\nexport interface IWalletClient {\n\taccount: string;\n\tchainId: number;\n\trequest(...args: any): Promise<any>;\n}\n\ntype EthereumProvider = { request(...args: any): Promise<any> };\n\nexport function createWalletClient({ account, chainId, provider }: TWalletClient) {\n\treturn {\n\t\taccount,\n\t\tchainId,\n\t\trequest: async (args: any) => {\n\t\t\ttry {\n\t\t\t\treturn await provider.request(args);\n\t\t\t} catch (e: any) {\n\t\t\t\t// CATCH EXCEPTION HERE\n\n\t\t\t\tconsole.log('exception', JSON.parse(e.message));\n\t\t\t\tthrow new Error(JSON.parse(e.message).message);\n\t\t\t}\n\t\t},\n\t} as IWalletClient;\n}\n"],"mappings":"AAcA,OAAO,SAASA,kBAAkBA,CAAAC,IAAA,EAAgD;EAAA,IAA/C;IAAEC,OAAO;IAAEC,OAAO;IAAEC;EAAwB,CAAC,GAAAH,IAAA;EAC/E,OAAO;IACNC,OAAO;IACPC,OAAO;IACPE,OAAO,EAAE,MAAOC,IAAS,IAAK;MAC7B,IAAI;QACH,OAAO,MAAMF,QAAQ,CAACC,OAAO,CAACC,IAAI,CAAC;MACpC,CAAC,CAAC,OAAOC,CAAM,EAAE;QAChB;;QAEAC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEC,IAAI,CAACC,KAAK,CAACJ,CAAC,CAACK,OAAO,CAAC,CAAC;QAC/C,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACC,KAAK,CAACJ,CAAC,CAACK,OAAO,CAAC,CAACA,OAAO,CAAC;MAC/C;IACD;EACD,CAAC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}