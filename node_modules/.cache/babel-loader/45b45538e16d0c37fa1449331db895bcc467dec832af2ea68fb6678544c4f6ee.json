{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { EventEmitter } from 'events';\nimport { miraiTestnet } from '../../constants/chains';\nimport { MiraiIDAPI } from '../transports/http/http-miraiid';\nimport { HttpConnectionError, NotFoundMiraiConnectionError, SDKError } from '../errors';\nexport function getEthereumChainId(chains) {\n  return chains[0].split(':')[1];\n}\nexport function toHexChainId(chainId) {\n  return chainId;\n}\n\n// helper type to force setting at least one value in an array\n\nexport class MiraiProvider {\n  constructor() {\n    _defineProperty(this, \"emitter\", new EventEmitter());\n    _defineProperty(this, \"accounts\", []);\n    _defineProperty(this, \"connection\", void 0);\n    _defineProperty(this, \"chainId\", \"0x\".concat(miraiTestnet.id.toString(16)));\n    _defineProperty(this, \"on\", (event, listener) => {\n      this.emitter.on(event, listener);\n      return this;\n    });\n    _defineProperty(this, \"once\", (event, listener) => {\n      this.emitter.once(event, listener);\n      return this;\n    });\n    _defineProperty(this, \"removeListener\", (event, listener) => {\n      this.emitter.removeListener(event, listener);\n      return this;\n    });\n    _defineProperty(this, \"off\", (event, listener) => {\n      this.emitter.off(event, listener);\n      return this;\n    });\n    _defineProperty(this, \"parseAccount\", payload => {\n      return this.parseAccountId(payload).address;\n    });\n  } // assigned during initialize\n  // this._signer = new SignerWebSocketService();\n\n  static async init(opts) {\n    const provider = new MiraiProvider();\n    await provider.initialize(opts);\n    return provider;\n  }\n  async request(args) {\n    return new Promise(async (resolve, reject) => {\n      this.connection.ws.socket.on('response', response => {\n        console.log('response', response);\n        resolve(response);\n      });\n      const {\n        statusCode,\n        message\n      } = await MiraiIDAPI.INSTANCE.sendRequest(this.connection.wcTopicId, {\n        chainId: \"\".concat(this.connection.namespace, \":\").concat(Number(parseInt(this.chainId, 16))),\n        request: args\n      }, this.connection.accessToken);\n      if (statusCode !== 200) {\n        throw new HttpConnectionError(SDKError.HttpConnectionError, 'Method request failed. Try again later !!!');\n      }\n    });\n  }\n  async enable() {\n    const accounts = await this.request({\n      method: 'eth_requestAccounts'\n    });\n    return accounts;\n  }\n  async getChainId() {\n    const chain = await this.request({\n      method: 'eth_chainId'\n    });\n    return chain;\n  }\n  async connect(opts) {\n    if (!this.connection.isConnected()) {\n      throw new Error('Connection not initialized. Call MiraiConnection.init() first');\n    }\n    this.emitter.emit('connect', {\n      chainId: this.chainId\n    });\n  }\n  get isWalletConnect() {\n    return true;\n  }\n  switchEthereumChain(chainId) {\n    this.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{\n        chainId: chainId.toString(16)\n      }]\n    });\n  }\n  parseChainId(chainId) {\n    return Number(chainId.split(':')[1]);\n  }\n  setChainIds(chains) {\n    this.emitter.emit('chainChanged', this.chainId);\n    this.persist();\n  }\n  setChainId(chain) {\n    this.switchEthereumChain(chain);\n  }\n  parseAccountId(account) {\n    const [namespace, reference, address] = account.split(':');\n    const chainId = \"\".concat(namespace, \":\").concat(reference);\n    return {\n      chainId,\n      address\n    };\n  }\n  setAccounts(accounts) {\n    this.accounts = accounts.map(x => this.parseAccountId(x).address);\n    this.emitter.emit('accountsChanged', this.accounts);\n  }\n  async initialize(opts) {\n    this.connection = opts.connection;\n    this.chainId = opts.chainId;\n    if (!this.connection) {\n      throw new NotFoundMiraiConnectionError('No mirai connection found');\n    }\n\n    // await this.registerEventListener();\n  }\n\n  // private async registerEventListener(): Promise<void> {\n  // \treturn new Promise(async (resolve, reject) => {\n  // \t\tconst socket = await this.connection.ws.establish(true);\n\n  // \t\tsocket.on('exception', (args: any) => {\n  // \t\t\tsocket.disconnect();\n  // \t\t\treject(new Error(JSON.stringify(args)));\n  // \t\t});\n\n  // \t\tsocket.on('connect', (args: any) => {\n  // \t\t\tresolve();\n  // \t\t});\n\n  // \t\tsocket.on(\n  // \t\t\tthis.connection.topicId,\n  // \t\t\t(\n  // \t\t\t\tpayload: IProviderEvents.BaseEventArgs<{\n  // \t\t\t\t\tevent: { name: string; data: any };\n  // \t\t\t\t\tchainId: string;\n  // \t\t\t\t}>,\n  // \t\t\t) => {\n  // \t\t\t\tconst { params } = payload;\n\n  // \t\t\t\tif (params && params !== undefined) {\n  // \t\t\t\t\tconst { event } = params;\n  // \t\t\t\t\tif (event.name === 'accountsChanged') {\n  // \t\t\t\t\t\tthis.accounts = this.parseAccounts(event.data);\n  // \t\t\t\t\t\tthis.emitter.emit('accountsChanged', this.accounts);\n  // \t\t\t\t\t} else if (event.name === 'chainChanged') {\n  // \t\t\t\t\t\tthis.setChainId(event.data);\n  // \t\t\t\t\t} else {\n  // \t\t\t\t\t\tthis.emitter.emit(event.name as any, event.data);\n  // \t\t\t\t\t}\n  // \t\t\t\t}\n  // \t\t\t},\n  // \t\t);\n\n  // \t\tsocket.on('connect_error', () => {\n  // \t\t\treject(new Error('Connection error'));\n  // \t\t});\n\n  // \t\tsocket.connect();\n  // \t});\n  // }\n\n  reset() {\n    this.chainId = \"0x\".concat(miraiTestnet.id.toString(16));\n    this.accounts = [];\n  }\n  persist() {}\n  parseAccounts(payload) {\n    if (typeof payload === 'string' || payload instanceof String) {\n      return [this.parseAccount(payload)];\n    }\n    return payload.map(account => this.parseAccount(account));\n  }\n}","map":{"version":3,"names":["EventEmitter","miraiTestnet","MiraiIDAPI","HttpConnectionError","NotFoundMiraiConnectionError","SDKError","getEthereumChainId","chains","split","toHexChainId","chainId","MiraiProvider","constructor","_defineProperty","concat","id","toString","event","listener","emitter","on","once","removeListener","off","payload","parseAccountId","address","init","opts","provider","initialize","request","args","Promise","resolve","reject","connection","ws","socket","response","console","log","statusCode","message","INSTANCE","sendRequest","wcTopicId","namespace","Number","parseInt","accessToken","enable","accounts","method","getChainId","chain","connect","isConnected","Error","emit","isWalletConnect","switchEthereumChain","params","parseChainId","setChainIds","persist","setChainId","account","reference","setAccounts","map","x","reset","parseAccounts","String","parseAccount"],"sources":["/Users/phuocnd/phuocnd/works/mirai/miraiidjs/src/sign-provider/providers/mirai-provider.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport {\n\tIEthereumProvider as IProvider,\n\tIEthereumProviderEvents,\n\tProviderAccounts,\n\tRequestArguments,\n\tProviderChainId,\n\tRpcMethod,\n} from './types';\nimport { Connection } from '../connection/connection';\nimport { miraiTestnet } from '../../constants/chains';\nimport { MiraiIDAPI } from '../transports/http/http-miraiid';\nimport { HttpConnectionError, NotFoundMiraiConnectionError, SDKError } from '../errors';\n\nexport type RpcEvent = 'accountsChanged' | 'chainChanged' | 'message' | 'disconnect' | 'connect';\n\nexport interface EthereumRpcMap {\n\t[chainId: string]: string;\n}\n\nexport interface SessionEvent {\n\tevent: { name: string; data: any };\n\tchainId: string;\n}\n\nexport interface ConnectOps {\n\tchains?: string[];\n\toptionalChains?: string[];\n\trpcMap?: EthereumRpcMap;\n\tpairingTopic?: string;\n\tchainId?: string;\n}\n\nexport interface IEthereumProvider extends IProvider {\n\tconnect(opts?: ConnectOps | undefined): Promise<void>;\n}\n\nexport function getEthereumChainId(chains: string[]): string {\n\treturn chains[0].split(':')[1];\n}\n\nexport function toHexChainId(chainId: string): string {\n\treturn chainId;\n}\n\n// helper type to force setting at least one value in an array\ntype ArrayOneOrMore<T> = {\n\t0: T;\n} & Array<T>;\n\nexport type EthereumProviderOptions = {\n\tconnection?: Connection;\n\tchainId: string;\n};\n\nexport type WalletConnectSession = {\n\ttopic: string;\n\texpiry: number;\n\tacknowledged: boolean;\n\tpairingTopic: string;\n\tcontroller: string;\n\tpeer: {\n\t\tpublicKey: string;\n\t\tmetadata: {\n\t\t\tname: string;\n\t\t\tdescription: string;\n\t\t\turl: string;\n\t\t\ticons: [];\n\t\t};\n\t};\n\tnamespaces?: {\n\t\t'eip155': {\n\t\t\taccounts: string[];\n\t\t\tevents: string[];\n\t\t};\n\t};\n};\n\nexport class MiraiProvider implements IEthereumProvider {\n\tpublic emitter = new EventEmitter();\n\tpublic accounts: string[] = [];\n\tprivate connection: Connection;\n\tpublic chainId = `0x${miraiTestnet.id.toString(16)}`;\n\n\tconstructor() {\n\t\t// assigned during initialize\n\t\t// this._signer = new SignerWebSocketService();\n\t}\n\n\tstatic async init(opts: EthereumProviderOptions): Promise<MiraiProvider> {\n\t\tconst provider = new MiraiProvider();\n\t\tawait provider.initialize(opts);\n\n\t\treturn provider;\n\t}\n\n\tpublic async request<T = unknown>(args: RequestArguments<RpcMethod>): Promise<T> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tthis.connection.ws.socket.on('response', (response: any) => {\n\t\t\t\tconsole.log('response', response);\n\t\t\t\tresolve(response);\n\t\t\t});\n\n\t\t\tconst { statusCode, message } = await MiraiIDAPI.INSTANCE.sendRequest<{\n\t\t\t\tstatusCode: number;\n\t\t\t\tmessage: string;\n\t\t\t}>(\n\t\t\t\tthis.connection.wcTopicId,\n\t\t\t\t{\n\t\t\t\t\tchainId: `${this.connection.namespace}:${Number(parseInt(this.chainId, 16))}`,\n\t\t\t\t\trequest: args,\n\t\t\t\t},\n\t\t\t\tthis.connection.accessToken,\n\t\t\t);\n\n\t\t\tif (statusCode !== 200) {\n\t\t\t\tthrow new HttpConnectionError(\n\t\t\t\t\tSDKError.HttpConnectionError,\n\t\t\t\t\t'Method request failed. Try again later !!!',\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async enable(): Promise<ProviderAccounts> {\n\t\tconst accounts = await this.request<ProviderAccounts>({ method: 'eth_requestAccounts' });\n\t\treturn accounts as ProviderAccounts;\n\t}\n\n\tpublic async getChainId(): Promise<ProviderChainId> {\n\t\tconst chain = await this.request({ method: 'eth_chainId' });\n\n\t\treturn chain as ProviderChainId;\n\t}\n\n\tpublic async connect(opts?: ConnectOps): Promise<void> {\n\t\tif (!this.connection.isConnected()) {\n\t\t\tthrow new Error('Connection not initialized. Call MiraiConnection.init() first');\n\t\t}\n\n\t\tthis.emitter.emit('connect', { chainId: this.chainId });\n\t}\n\n\tpublic on: IEthereumProviderEvents['on'] = (event, listener) => {\n\t\tthis.emitter.on(event, listener);\n\t\treturn this;\n\t};\n\n\tpublic once: IEthereumProviderEvents['once'] = (event, listener) => {\n\t\tthis.emitter.once(event, listener);\n\t\treturn this;\n\t};\n\n\tpublic removeListener: IEthereumProviderEvents['removeListener'] = (event, listener) => {\n\t\tthis.emitter.removeListener(event, listener);\n\t\treturn this;\n\t};\n\n\tpublic off: IEthereumProviderEvents['off'] = (event, listener) => {\n\t\tthis.emitter.off(event, listener);\n\t\treturn this;\n\t};\n\n\tget isWalletConnect() {\n\t\treturn true;\n\t}\n\n\tprotected switchEthereumChain(chainId: number): void {\n\t\tthis.request({\n\t\t\tmethod: 'wallet_switchEthereumChain',\n\t\t\tparams: [{ chainId: chainId.toString(16) }],\n\t\t});\n\t}\n\n\tprotected parseChainId(chainId: string): number {\n\t\treturn Number(chainId.split(':')[1]);\n\t}\n\n\tprotected setChainIds(chains: string[]) {\n\t\tthis.emitter.emit('chainChanged', this.chainId);\n\t\tthis.persist();\n\t}\n\n\tprotected setChainId(chain: number) {\n\t\tthis.switchEthereumChain(chain);\n\t}\n\n\tprotected parseAccountId(account: string): { chainId: string; address: string } {\n\t\tconst [namespace, reference, address] = account.split(':');\n\t\tconst chainId = `${namespace}:${reference}`;\n\t\treturn { chainId, address };\n\t}\n\n\tprotected setAccounts(accounts: string[]) {\n\t\tthis.accounts = accounts.map((x) => this.parseAccountId(x).address);\n\n\t\tthis.emitter.emit('accountsChanged', this.accounts);\n\t}\n\n\tprotected async initialize(opts: EthereumProviderOptions) {\n\t\tthis.connection = opts.connection;\n\t\tthis.chainId = opts.chainId;\n\t\tif (!this.connection) {\n\t\t\tthrow new NotFoundMiraiConnectionError('No mirai connection found');\n\t\t}\n\n\t\t// await this.registerEventListener();\n\t}\n\n\t// private async registerEventListener(): Promise<void> {\n\t// \treturn new Promise(async (resolve, reject) => {\n\t// \t\tconst socket = await this.connection.ws.establish(true);\n\n\t// \t\tsocket.on('exception', (args: any) => {\n\t// \t\t\tsocket.disconnect();\n\t// \t\t\treject(new Error(JSON.stringify(args)));\n\t// \t\t});\n\n\t// \t\tsocket.on('connect', (args: any) => {\n\t// \t\t\tresolve();\n\t// \t\t});\n\n\t// \t\tsocket.on(\n\t// \t\t\tthis.connection.topicId,\n\t// \t\t\t(\n\t// \t\t\t\tpayload: IProviderEvents.BaseEventArgs<{\n\t// \t\t\t\t\tevent: { name: string; data: any };\n\t// \t\t\t\t\tchainId: string;\n\t// \t\t\t\t}>,\n\t// \t\t\t) => {\n\t// \t\t\t\tconst { params } = payload;\n\n\t// \t\t\t\tif (params && params !== undefined) {\n\t// \t\t\t\t\tconst { event } = params;\n\t// \t\t\t\t\tif (event.name === 'accountsChanged') {\n\t// \t\t\t\t\t\tthis.accounts = this.parseAccounts(event.data);\n\t// \t\t\t\t\t\tthis.emitter.emit('accountsChanged', this.accounts);\n\t// \t\t\t\t\t} else if (event.name === 'chainChanged') {\n\t// \t\t\t\t\t\tthis.setChainId(event.data);\n\t// \t\t\t\t\t} else {\n\t// \t\t\t\t\t\tthis.emitter.emit(event.name as any, event.data);\n\t// \t\t\t\t\t}\n\t// \t\t\t\t}\n\t// \t\t\t},\n\t// \t\t);\n\n\t// \t\tsocket.on('connect_error', () => {\n\t// \t\t\treject(new Error('Connection error'));\n\t// \t\t});\n\n\t// \t\tsocket.connect();\n\t// \t});\n\t// }\n\n\tprotected reset() {\n\t\tthis.chainId = `0x${miraiTestnet.id.toString(16)}`;\n\t\tthis.accounts = [];\n\t}\n\n\tprotected persist() {}\n\n\tprotected parseAccounts(payload: string | string[]): string[] {\n\t\tif (typeof payload === 'string' || payload instanceof String) {\n\t\t\treturn [this.parseAccount(payload)];\n\t\t}\n\t\treturn payload.map((account: string) => this.parseAccount(account));\n\t}\n\n\tprotected parseAccount = (payload: any): string => {\n\t\treturn this.parseAccountId(payload).address;\n\t};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}