{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { SignerWebSocketService } from '../transports/websocket/ws-signer';\nimport { Connection } from './connection';\nimport jwt_decode from 'jwt-decode';\nimport { MiraiProvider } from '../providers/mirai-provider';\n// export const MiraiRelayerUrl: string = 'wss://id-api-dev.mirailabs.co/mpc';\n\nclass MiraiConnection extends Connection {\n  constructor(opts) {\n    super(opts);\n    _defineProperty(this, \"topicId\", void 0);\n    _defineProperty(this, \"wcTopicId\", void 0);\n    // FOR PROVIDER\n    _defineProperty(this, \"chains\", void 0);\n    _defineProperty(this, \"namespace\", void 0);\n    _defineProperty(this, \"miraiRelayerUrl\", 'https://dev-sign-provider.miraiid.io');\n    _defineProperty(this, \"pending\", false);\n    _defineProperty(this, \"initializing\", false);\n    _defineProperty(this, \"initialized\", false);\n    _defineProperty(this, \"isApproved\", false);\n    // FOR WS CONNECTION\n    _defineProperty(this, \"accessToken\", void 0);\n    _defineProperty(this, \"ws\", void 0);\n    this.accessToken = opts.accessToken || null;\n  }\n  static async init() {\n    let {\n      accessToken\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const connection = new MiraiConnection({\n      accessToken\n    });\n    await connection.initialize();\n    return connection;\n  }\n  async getProvider() {\n    if (this.isApproved) {\n      return await MiraiProvider.init({\n        connection: this\n      });\n    }\n    return null;\n  }\n  isConnected() {\n    return this.initialized;\n  }\n\n  // PRIVATE\n  async initialize() {\n    if (this.pending) {\n      return new Promise((resolve, reject) => {\n        this.once('open', () => {\n          this.once('open_error', error => {\n            reject(error);\n          });\n          if (typeof this.ws === 'undefined') {\n            return reject(new Error('WS not initialized'));\n          }\n          resolve();\n        });\n      });\n    }\n    try {\n      this.pending = true;\n      await this._registerListener();\n      if (this.accessToken) {\n        await this.register(this.accessToken);\n      }\n      this.emit('open');\n    } catch (e) {\n      this.emit('open_error', e);\n      throw e;\n    }\n  }\n  async register(accessToken) {\n    if (typeof this.ws !== 'undefined') {\n      return this.ws;\n    }\n    if (this.initializing) {\n      return new Promise((resolve, reject) => {\n        this.once('register_error', error => {\n          reject(error);\n        });\n        this.once('init', () => {\n          if (typeof this.ws === 'undefined') {\n            return reject(new Error('WS not initialized'));\n          }\n          resolve(this.ws);\n        });\n      });\n    }\n    try {\n      this.initializing = true;\n      this.ws = new SignerWebSocketService({\n        url: this.miraiRelayerUrl,\n        accessToken\n      });\n      this.initializing = false;\n      this.emit('init');\n      return this.ws;\n    } catch (e) {\n      this.emit('register_error', e);\n      throw e;\n    }\n  }\n  async connect(_ref) {\n    let {\n      accessToken\n    } = _ref;\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (!this.ws || this.ws === undefined) {\n          await this.register(accessToken);\n        }\n        const socket = await this.ws.establish(true);\n        socket.on('connect', e => {\n          const jwtDecoded = jwt_decode(accessToken);\n          // const topicId = keccak256(jwtDecoded.sub + jwtDecoded.aud);\n\n          const topicId = this.ws.socket.getSocket().id;\n          this.emit('connected', topicId);\n          this.accessToken = accessToken;\n          this.initialized = true;\n\n          // socket.getSocket().on(topicId, (resp: { method: string; data: any }) => {\n          // \tif (resp.method === 'rejected') {\n          // \t\tthis.emit('rejected', new Error(JSON.stringify(resp.data)));\n          // \t\tthis.isApproved = false;\n\n          // \t\tif (typeof window !== 'undefined' && window !== undefined) {\n          // \t\t\twindow.postMessage({ topicId, message: 'user_rejected' }, '*');\n          // \t\t}\n\n          // \t\treject(false);\n          // \t}\n\n          // \tthis.isApproved = true;\n\n          // \tthis.emit('approved', {\n          // \t\t...(resp.data as WalletConnectSession),\n          // \t\ttopicId: topicId,\n          // \t});\n\n          // \tif (typeof window !== 'undefined' && window !== undefined) {\n          // \t\twindow.postMessage({ topicId, message: 'user_approved' }, '*');\n          // \t}\n\n          // \tresolve(true);\n          // });\n\n          resolve(true);\n        });\n        socket.on('uri', uri => {\n          this.emit('display_uri', uri);\n        });\n        socket.on('topic', topic => {\n          this.wcTopicId = topic;\n          this.isApproved = true;\n          this.emit('approved', {\n            topicId: this.topicId\n          });\n          if (typeof window !== 'undefined' && window !== undefined) {\n            window.postMessage({\n              topicId: this.topicId,\n              message: 'user_approved'\n            }, '*');\n          }\n        });\n        socket.on('response', response => {\n          console.log('response', response);\n        });\n        socket.on('error', error => {\n          console.log(error);\n        });\n        socket.on('error-topic', error => {\n          console.log(error);\n        });\n        socket.on('connect_error', () => {\n          this.emit('error', new Error(JSON.stringify('Connection error')));\n          reject(false);\n        });\n        socket.connect();\n      } catch (error) {\n        console.error(error);\n        throw error;\n      } finally {}\n    });\n  }\n  async disconnect() {\n    return new Promise((resolve, reject) => {\n      if (this.ws.socket.disconnect()) {\n        this.emit('disconnected');\n        resolve(true);\n      }\n      resolve(false);\n    });\n  }\n  async resetAll() {\n    await this.disconnect();\n    this.removeAllListeners();\n    this.accessToken = null;\n    this.chains = [];\n    this.initialized = false;\n    this.namespace = null;\n  }\n  async _registerListener() {\n    this.once('connected', async topic => {\n      this.topicId = topic;\n      if (typeof window !== 'undefined' && window !== undefined) {\n        window.addEventListener('message', async event => {\n          const {\n            data\n          } = event;\n          const {\n            topic,\n            message\n          } = data;\n          if (topic === this.topicId && 'window_closed' === message) {\n            await this.resetAll();\n          }\n        });\n      }\n    });\n    this.once('namespace', namespace => {\n      this.namespace = namespace;\n    });\n    this.once('chains', chains => {\n      this.chains = chains;\n    });\n  }\n}\nexport { MiraiConnection };","map":{"version":3,"names":["SignerWebSocketService","Connection","jwt_decode","MiraiProvider","MiraiConnection","constructor","opts","_defineProperty","accessToken","init","arguments","length","undefined","connection","initialize","getProvider","isApproved","isConnected","initialized","pending","Promise","resolve","reject","once","error","ws","Error","_registerListener","register","emit","e","initializing","url","miraiRelayerUrl","connect","_ref","socket","establish","on","jwtDecoded","topicId","getSocket","id","uri","topic","wcTopicId","window","postMessage","message","response","console","log","JSON","stringify","disconnect","resetAll","removeAllListeners","chains","namespace","addEventListener","event","data"],"sources":["/Users/phuocnd/phuocnd/works/mirai/miraiidjs/src/sign-provider/connection/mirai-connection.ts"],"sourcesContent":["import { SignerWebSocketService } from '../transports/websocket/ws-signer';\nimport { Connection, ConnectionOpts } from './connection';\nimport jwt_decode from 'jwt-decode';\nimport { MiraiProvider, WalletConnectSession } from '../providers/mirai-provider';\nimport { auth } from 'src/constants';\n\n// export const MiraiRelayerUrl: string = 'wss://id-api-dev.mirailabs.co/mpc';\n\nclass MiraiConnection extends Connection {\n\tpublic topicId: string;\n\tpublic wcTopicId: string;\n\n\t// FOR PROVIDER\n\tpublic chains: string[];\n\tpublic namespace: string;\n\n\tprivate readonly miraiRelayerUrl: string = 'https://dev-sign-provider.miraiid.io';\n\n\tprivate pending = false;\n\tprivate initializing = false;\n\tprivate initialized = false;\n\tprivate isApproved: boolean = false;\n\n\t// FOR WS CONNECTION\n\tpublic accessToken: string;\n\tpublic ws: InstanceType<typeof SignerWebSocketService>;\n\n\tconstructor(opts: ConnectionOpts) {\n\t\tsuper(opts);\n\n\t\tthis.accessToken = opts.accessToken || null;\n\t}\n\n\tpublic static async init({ accessToken }: { accessToken?: string } = {}) {\n\t\tconst connection = new MiraiConnection({ accessToken });\n\n\t\tawait connection.initialize();\n\n\t\treturn connection;\n\t}\n\n\tpublic async getProvider(): Promise<MiraiProvider> {\n\t\tif (this.isApproved) {\n\t\t\treturn await MiraiProvider.init({\n\t\t\t\tconnection: this,\n\t\t\t});\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic isConnected(): boolean {\n\t\treturn this.initialized;\n\t}\n\n\t// PRIVATE\n\tprivate async initialize(): Promise<void> {\n\t\tif (this.pending) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.once('open', () => {\n\t\t\t\t\tthis.once('open_error', (error: any) => {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t});\n\t\t\t\t\tif (typeof this.ws === 'undefined') {\n\t\t\t\t\t\treturn reject(new Error('WS not initialized'));\n\t\t\t\t\t}\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\ttry {\n\t\t\tthis.pending = true;\n\t\t\tawait this._registerListener();\n\n\t\t\tif (this.accessToken) {\n\t\t\t\tawait this.register(this.accessToken);\n\t\t\t}\n\n\t\t\tthis.emit('open');\n\t\t} catch (e) {\n\t\t\tthis.emit('open_error', e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprivate async register(accessToken: string): Promise<SignerWebSocketService> {\n\t\tif (typeof this.ws !== 'undefined') {\n\t\t\treturn this.ws;\n\t\t}\n\n\t\tif (this.initializing) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.once('register_error', (error: any) => {\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t\t\tthis.once('init', () => {\n\t\t\t\t\tif (typeof this.ws === 'undefined') {\n\t\t\t\t\t\treturn reject(new Error('WS not initialized'));\n\t\t\t\t\t}\n\t\t\t\t\tresolve(this.ws);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\ttry {\n\t\t\tthis.initializing = true;\n\n\t\t\tthis.ws = new SignerWebSocketService({\n\t\t\t\turl: this.miraiRelayerUrl,\n\t\t\t\taccessToken,\n\t\t\t});\n\n\t\t\tthis.initializing = false;\n\t\t\tthis.emit('init');\n\t\t\treturn this.ws;\n\t\t} catch (e) {\n\t\t\tthis.emit('register_error', e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tpublic async connect({ accessToken }: { accessToken: string }): Promise<boolean> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tif (!this.ws || this.ws === undefined) {\n\t\t\t\t\tawait this.register(accessToken);\n\t\t\t\t}\n\t\t\t\tconst socket = await this.ws.establish(true);\n\n\t\t\t\tsocket.on('connect', (e: any) => {\n\t\t\t\t\tconst jwtDecoded = jwt_decode(accessToken) as auth.TMiraiAccessToken;\n\t\t\t\t\t// const topicId = keccak256(jwtDecoded.sub + jwtDecoded.aud);\n\n\t\t\t\t\tconst topicId = this.ws.socket.getSocket().id;\n\t\t\t\t\tthis.emit('connected', topicId);\n\t\t\t\t\tthis.accessToken = accessToken;\n\n\t\t\t\t\tthis.initialized = true;\n\n\t\t\t\t\t// socket.getSocket().on(topicId, (resp: { method: string; data: any }) => {\n\t\t\t\t\t// \tif (resp.method === 'rejected') {\n\t\t\t\t\t// \t\tthis.emit('rejected', new Error(JSON.stringify(resp.data)));\n\t\t\t\t\t// \t\tthis.isApproved = false;\n\n\t\t\t\t\t// \t\tif (typeof window !== 'undefined' && window !== undefined) {\n\t\t\t\t\t// \t\t\twindow.postMessage({ topicId, message: 'user_rejected' }, '*');\n\t\t\t\t\t// \t\t}\n\n\t\t\t\t\t// \t\treject(false);\n\t\t\t\t\t// \t}\n\n\t\t\t\t\t// \tthis.isApproved = true;\n\n\t\t\t\t\t// \tthis.emit('approved', {\n\t\t\t\t\t// \t\t...(resp.data as WalletConnectSession),\n\t\t\t\t\t// \t\ttopicId: topicId,\n\t\t\t\t\t// \t});\n\n\t\t\t\t\t// \tif (typeof window !== 'undefined' && window !== undefined) {\n\t\t\t\t\t// \t\twindow.postMessage({ topicId, message: 'user_approved' }, '*');\n\t\t\t\t\t// \t}\n\n\t\t\t\t\t// \tresolve(true);\n\t\t\t\t\t// });\n\n\t\t\t\t\tresolve(true);\n\t\t\t\t});\n\n\t\t\t\tsocket.on('uri', (uri: string) => {\n\t\t\t\t\tthis.emit('display_uri', uri);\n\t\t\t\t});\n\n\t\t\t\tsocket.on('topic', (topic: string) => {\n\t\t\t\t\tthis.wcTopicId = topic;\n\n\t\t\t\t\tthis.isApproved = true;\n\n\t\t\t\t\tthis.emit('approved', {\n\t\t\t\t\t\ttopicId: this.topicId,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (typeof window !== 'undefined' && window !== undefined) {\n\t\t\t\t\t\twindow.postMessage({ topicId: this.topicId, message: 'user_approved' }, '*');\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tsocket.on('response', (response: string) => {\n\t\t\t\t\tconsole.log('response', response);\n\t\t\t\t});\n\n\t\t\t\tsocket.on('error', (error: string) => {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t});\n\n\t\t\t\tsocket.on('error-topic', (error: string) => {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t});\n\n\t\t\t\tsocket.on('connect_error', () => {\n\t\t\t\t\tthis.emit('error', new Error(JSON.stringify('Connection error')));\n\t\t\t\t\treject(false);\n\t\t\t\t});\n\n\t\t\t\tsocket.connect();\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tthrow error;\n\t\t\t} finally {\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async disconnect(): Promise<boolean> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (this.ws.socket.disconnect()) {\n\t\t\t\tthis.emit('disconnected');\n\t\t\t\tresolve(true);\n\t\t\t}\n\n\t\t\tresolve(false);\n\t\t});\n\t}\n\n\tprivate async resetAll(): Promise<void> {\n\t\tawait this.disconnect();\n\n\t\tthis.removeAllListeners();\n\n\t\tthis.accessToken = null;\n\t\tthis.chains = [];\n\t\tthis.initialized = false;\n\t\tthis.namespace = null;\n\t}\n\n\tprivate async _registerListener() {\n\t\tthis.once('connected', async (topic: string) => {\n\t\t\tthis.topicId = topic;\n\n\t\t\tif (typeof window !== 'undefined' && window !== undefined) {\n\t\t\t\twindow.addEventListener('message', async (event) => {\n\t\t\t\t\tconst { data } = event;\n\n\t\t\t\t\tconst { topic, message } = data;\n\n\t\t\t\t\tif (topic === this.topicId && 'window_closed' === message) {\n\t\t\t\t\t\tawait this.resetAll();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tthis.once('namespace', (namespace: string) => {\n\t\t\tthis.namespace = namespace;\n\t\t});\n\n\t\tthis.once('chains', (chains: string[]) => {\n\t\t\tthis.chains = chains;\n\t\t});\n\t}\n}\n\nexport { MiraiConnection };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}